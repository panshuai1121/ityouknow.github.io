I"]'<h2 id="memcached-介绍">Memcached 介绍</h2>

<p>Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个存储键/值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。</p>

<p>因为 Spring Boot 没有针对 Memcached 提供对应的组建包，因此需要我们自己来集成。官方推出的 Java 客户端 Spymemcached 是一个比较好的选择之一。</p>

<p><strong>Spymemcached 介绍</strong></p>

<p>Spymemcached 最早由 Dustin Sallings 开发，Dustin 后来和别人一起创办了 Couchbase (原NorthScale)，职位为首席架构师。2014 加入 Google。</p>

<p>Spymemcached 是一个采用 Java 开发的异步、单线程的 Memcached 客户端， 使用 NIO 实现。Spymemcached 是 Memcached 的一个流行的 Java client 库，性能表现出色，广泛应用于 Java + Memcached 项目中。</p>

<h2 id="依赖配置">依赖配置</h2>

<p><strong>添加依赖</strong></p>

<p>pomx 包中添加 spymemcached 的引用</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>net.spy<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spymemcached<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>2.12.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><strong>添加配置</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>memcache.ip=192.168.0.161
memcache.port=11211
</code></pre></div></div>

<p>分别配置 memcache 的 Ip 地址和 端口。</p>

<p><strong>设置配置对象</strong></p>

<p>创建 <code class="highlighter-rouge">MemcacheSource</code> 接收配置信息</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"memcache"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemcacheSource</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">ip</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getIp</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ip</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setIp</span><span class="o">(</span><span class="nc">String</span> <span class="n">ip</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">ip</span> <span class="o">=</span> <span class="n">ip</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPort</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">port</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPort</span><span class="o">(</span><span class="kt">int</span> <span class="n">port</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">port</span> <span class="o">=</span> <span class="n">port</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">@ConfigurationProperties(prefix = "memcache")</code> 的意思会以 <code class="highlighter-rouge">memcache.*</code> 为开通将对应的配置文件加载到属性中。</p>

<h2 id="启动初始化-memcachedclient">启动初始化 MemcachedClient</h2>

<p>我们使用上一节的内容<a href="http://www.ityouknow.com/springboot/2018/05/03/spring-boot-commandLineRunner.html">Spring Boot 2 (七)：Spring Boot 如何解决项目启动时初始化资源</a>,利用 CommandLineRunner 在项目启动的时候配置好 MemcachedClient 。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemcachedRunner</span> <span class="kd">implements</span> <span class="nc">CommandLineRunner</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span>  <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>

    <span class="nd">@Resource</span>
    <span class="kd">private</span>  <span class="nc">MemcacheSource</span> <span class="n">memcacheSource</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">MemcachedClient</span> <span class="n">client</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemcachedClient</span><span class="o">(</span><span class="k">new</span> <span class="nc">InetSocketAddress</span><span class="o">(</span><span class="n">memcacheSource</span><span class="o">.</span><span class="na">getIp</span><span class="o">(),</span><span class="n">memcacheSource</span><span class="o">.</span><span class="na">getPort</span><span class="o">()));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"inint MemcachedClient failed "</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">MemcachedClient</span> <span class="nf">getClient</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">client</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="测试使用">测试使用</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RepositoryTests</span> <span class="o">{</span>

  <span class="nd">@Resource</span>
    <span class="kd">private</span> <span class="nc">MemcachedRunner</span> <span class="n">memcachedRunner</span><span class="o">;</span>

  <span class="nd">@Test</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSetGet</span><span class="o">()</span>  <span class="o">{</span>
    <span class="nc">MemcachedClient</span> <span class="n">memcachedClient</span> <span class="o">=</span> <span class="n">memcachedRunner</span><span class="o">.</span><span class="na">getClient</span><span class="o">();</span>
    <span class="n">memcachedClient</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"testkey"</span><span class="o">,</span><span class="mi">1000</span><span class="o">,</span><span class="s">"666666"</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"***********  "</span><span class="o">+</span><span class="n">memcachedClient</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"testkey"</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>使用中先测试插入一个 key 为 testkey ，1000 为过期时间单位为 毫秒，最后的 “666666” 为 key 对应的值。</p>

<p>执行测试用例 testSetGet ，控制台输出内容：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>***********  666666
</code></pre></div></div>

<p>表明测试成功。</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>
:ET