I"B`<p>在上篇文章<a href="http://www.ityouknow.com/springboot/2016/02/03/spring-boot-web.html">Spring Boot(二)：Web 综合开发</a>中简单介绍了一下 Spring Boot Jpa 的基础性使用，这篇文章将更加全面的介绍 Spring Boot Jpa 常见用法以及注意事项。</p>

<p>使用 Spring Boot Jpa 开发时，发现国内对 Spring Boot Jpa 全面介绍的文章比较少案例也比较零碎，因此写文章总结一下。本人也正在翻译<a href="https://ityouknow.gitbooks.io/spring-data-jpa-reference-documentation/content/">Spring Data JPA 参考指南</a>,有兴趣的同学欢迎联系我，一起加入翻译中！</p>

<h2 id="spring-boot-jpa-介绍">Spring Boot Jpa 介绍</h2>

<h3 id="首先了解-jpa-是什么">首先了解 Jpa 是什么？</h3>

<p>Jpa (Java Persistence API) 是 Sun 官方提出的 Java 持久化规范。它为 Java 开发人员提供了一种对象/关联映射工具来管理 Java 应用中的关系数据。它的出现主要是为了简化现有的持久化开发工作和整合 ORM 技术，结束现在 Hibernate，TopLink，JDO 等 ORM 框架各自为营的局面。</p>

<p>值得注意的是，Jpa是在充分吸收了现有 Hibernate，TopLink，JDO 等 ORM 框架的基础上发展而来的，具有易于使用，伸缩性强等优点。从目前的开发社区的反应上看，Jpa 受到了极大的支持和赞扬，其中就包括了 Spring 与 EJB3. 0的开发团队。</p>

<blockquote>
  <p>注意:Jpa 是一套规范，不是一套产品，那么像 Hibernate,TopLink,JDO 他们是一套产品，如果说这些产品实现了这个 Jpa 规范，那么我们就可以叫他们为 Jpa 的实现产品。</p>
</blockquote>

<h3 id="spring-boot-jpa">Spring Boot Jpa</h3>

<p>Spring Boot Jpa 是 Spring 基于 ORM 框架、Jpa 规范的基础上封装的一套 Jpa 应用框架，可使开发者用极简的代码即可实现对数据的访问和操作。它提供了包括增删改查等在内的常用功能，且易于扩展！学习并使用 Spring Data Jpa  可以极大提高开发效率！</p>

<blockquote>
  <p>Spring Boot Jpa 让我们解脱了 DAO 层的操作，基本上所有 CRUD 都可以依赖于它来实现</p>
</blockquote>

<h2 id="基本查询">基本查询</h2>

<p>基本查询也分为两种，一种是 Spring Data 默认已经实现，一种是根据查询的方法来自动解析成 SQL。</p>

<h3 id="预先生成方法">预先生成方法</h3>

<p>Spring Boot Jpa  默认预先生成了一些基本的CURD的方法，例如：增、删、改等等</p>

<p>1 继承 JpaRepository</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>2 使用默认方法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBaseQuery</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	<span class="nc">User</span> <span class="n">user</span><span class="o">=</span><span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
	<span class="n">userRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
	<span class="n">userRepository</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="mi">1</span><span class="n">l</span><span class="o">);</span>
	<span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
	<span class="n">userRepository</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
	<span class="n">userRepository</span><span class="o">.</span><span class="na">count</span><span class="o">();</span>
	<span class="n">userRepository</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="mi">1</span><span class="n">l</span><span class="o">);</span>
	<span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>就不解释了根据方法名就看出意思来</p>

<h3 id="自定义简单查询">自定义简单查询</h3>

<p>自定义的简单查询就是根据方法名来自动生成 SQL，主要的语法是<code class="highlighter-rouge">findXXBy</code>,<code class="highlighter-rouge">readAXXBy</code>,<code class="highlighter-rouge">queryXXBy</code>,<code class="highlighter-rouge">countXXBy</code>, <code class="highlighter-rouge">getXXBy</code>后面跟属性名称：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="nf">findByUserName</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">);</span>
</code></pre></div></div>

<p>也使用一些加一些关键字<code class="highlighter-rouge">And </code>、 <code class="highlighter-rouge">Or</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="nf">findByUserNameOrEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nc">String</span> <span class="n">email</span><span class="o">);</span>
</code></pre></div></div>

<p>修改、删除、统计也是类似语法</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Long</span> <span class="nf">deleteById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>
<span class="nc">Long</span> <span class="nf">countByUserName</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">)</span>
</code></pre></div></div>

<p>基本上 SQL 体系中的关键词都可以使用，例如：<code class="highlighter-rouge"> LIKE </code>、 <code class="highlighter-rouge">IgnoreCase</code>、 <code class="highlighter-rouge">OrderBy</code>。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findByEmailLike</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">);</span>
<span class="nc">User</span> <span class="nf">findByUserNameIgnoreCase</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findByUserNameOrderByEmailDesc</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">);</span>
</code></pre></div></div>

<p><strong>具体的关键字，使用方法和生产成SQL如下表所示</strong></p>

<table>
  <thead>
    <tr>
      <th>Keyword</th>
      <th>Sample</th>
      <th>JPQL snippet</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>And</td>
      <td>findByLastnameAndFirstname</td>
      <td>… where x.lastname = ?1 and x.firstname = ?2</td>
    </tr>
    <tr>
      <td>Or</td>
      <td>findByLastnameOrFirstname</td>
      <td>… where x.lastname = ?1 or x.firstname = ?2</td>
    </tr>
    <tr>
      <td>Is,Equals</td>
      <td>findByFirstnameIs,findByFirstnameEquals</td>
      <td>… where x.firstname = ?1</td>
    </tr>
    <tr>
      <td>Between</td>
      <td>findByStartDateBetween</td>
      <td>… where x.startDate between ?1 and ?2</td>
    </tr>
    <tr>
      <td>LessThan</td>
      <td>findByAgeLessThan</td>
      <td>… where x.age &lt; ?1</td>
    </tr>
    <tr>
      <td>LessThanEqual</td>
      <td>findByAgeLessThanEqual</td>
      <td>… where x.age ⇐ ?1</td>
    </tr>
    <tr>
      <td>GreaterThan</td>
      <td>findByAgeGreaterThan</td>
      <td>… where x.age &gt; ?1</td>
    </tr>
    <tr>
      <td>GreaterThanEqual</td>
      <td>findByAgeGreaterThanEqual</td>
      <td>… where x.age &gt;= ?1</td>
    </tr>
    <tr>
      <td>After</td>
      <td>findByStartDateAfter</td>
      <td>… where x.startDate &gt; ?1</td>
    </tr>
    <tr>
      <td>Before</td>
      <td>findByStartDateBefore</td>
      <td>… where x.startDate &lt; ?1</td>
    </tr>
    <tr>
      <td>IsNull</td>
      <td>findByAgeIsNull</td>
      <td>… where x.age is null</td>
    </tr>
    <tr>
      <td>IsNotNull,NotNull</td>
      <td>findByAge(Is)NotNull</td>
      <td>… where x.age not null</td>
    </tr>
    <tr>
      <td>Like</td>
      <td>findByFirstnameLike</td>
      <td>… where x.firstname like ?1</td>
    </tr>
    <tr>
      <td>NotLike</td>
      <td>findByFirstnameNotLike</td>
      <td>… where x.firstname not like ?1</td>
    </tr>
    <tr>
      <td>StartingWith</td>
      <td>findByFirstnameStartingWith</td>
      <td>… where x.firstname like ?1 (parameter bound with appended %)</td>
    </tr>
    <tr>
      <td>EndingWith</td>
      <td>findByFirstnameEndingWith</td>
      <td>… where x.firstname like ?1 (parameter bound with prepended %)</td>
    </tr>
    <tr>
      <td>Containing</td>
      <td>findByFirstnameContaining</td>
      <td>… where x.firstname like ?1 (parameter bound wrapped in %)</td>
    </tr>
    <tr>
      <td>OrderBy</td>
      <td>findByAgeOrderByLastnameDesc</td>
      <td>… where x.age = ?1 order by x.lastname desc</td>
    </tr>
    <tr>
      <td>Not</td>
      <td>findByLastnameNot</td>
      <td>… where x.lastname &lt;&gt; ?1</td>
    </tr>
    <tr>
      <td>In</td>
      <td>findByAgeIn(Collection<Age> ages)</Age></td>
      <td>… where x.age in ?1</td>
    </tr>
    <tr>
      <td>NotIn</td>
      <td>findByAgeNotIn(Collection<Age> age)</Age></td>
      <td>… where x.age not in ?1</td>
    </tr>
    <tr>
      <td>TRUE</td>
      <td>findByActiveTrue()</td>
      <td>… where x.active = true</td>
    </tr>
    <tr>
      <td>FALSE</td>
      <td>findByActiveFalse()</td>
      <td>… where x.active = false</td>
    </tr>
    <tr>
      <td>IgnoreCase</td>
      <td>findByFirstnameIgnoreCase</td>
      <td>… where UPPER(x.firstame) = UPPER(?1)</td>
    </tr>
  </tbody>
</table>

<h2 id="复杂查询">复杂查询</h2>

<p>在实际的开发中我们需要用到分页、删选、连表等查询的时候就需要特殊的方法或者自定义 SQL</p>

<h3 id="分页查询">分页查询</h3>

<p>分页查询在实际使用中非常普遍了，Spring Boot Jpa 已经帮我们实现了分页的功能，在查询的方法中，需要传入参数<code class="highlighter-rouge">Pageable</code> ,当查询中有多个参数的时候<code class="highlighter-rouge">Pageable</code>建议做为最后一个参数传入.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findALL</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="nf">findByUserName</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">,</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">Pageable</code> 是 Spring 封装的分页实现类，使用的时候需要传入页数、每页条数和排序规则</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPageQuery</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
	<span class="kt">int</span> <span class="n">page</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span><span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="o">;</span>
	<span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sort</span><span class="o">(</span><span class="nc">Direction</span><span class="o">.</span><span class="na">DESC</span><span class="o">,</span> <span class="s">"id"</span><span class="o">);</span>
    <span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PageRequest</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">sort</span><span class="o">);</span>
    <span class="n">userRepository</span><span class="o">.</span><span class="na">findALL</span><span class="o">(</span><span class="n">pageable</span><span class="o">);</span>
    <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUserName</span><span class="o">(</span><span class="s">"testName"</span><span class="o">,</span> <span class="n">pageable</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>限制查询</strong></p>

<p>有时候我们只需要查询前N个元素，或者支取前一个实体。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>User findFirstByOrderByLastnameAsc();
User findTopByOrderByAgeDesc();
Page&lt;User&gt; queryFirst10ByLastname(String lastname, Pageable pageable);
List&lt;User&gt; findFirst10ByLastname(String lastname, Sort sort);
List&lt;User&gt; findTop10ByLastname(String lastname, Pageable pageable);
</code></pre></div></div>

<h3 id="自定义sql查询">自定义SQL查询</h3>

<p>其实 Spring Data 觉大部分的 SQL 都可以根据方法名定义的方式来实现，但是由于某些原因我们想使用自定义的 SQL 来查询，Spring Data 也是完美支持的；在 SQL 的查询方法上面使用<code class="highlighter-rouge">@Query</code>注解，如涉及到删除和修改在需要加上<code class="highlighter-rouge">@Modifying</code>.也可以根据需要添加 <code class="highlighter-rouge">@Transactional</code>对事物的支持，查询超时的设置等。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Modifying
@Query("update User u set u.userName = ?1 where u.id = ?2")
int modifyByIdAndUserId(String  userName, Long id);
	
@Transactional
@Modifying
@Query("delete from User where id = ?1")
void deleteByUserId(Long id);
  
@Transactional(timeout = 10)
@Query("select u from User u where u.emailAddress = ?1")
User findByEmailAddress(String emailAddress);
</code></pre></div></div>

<h3 id="多表查询">多表查询</h3>

<p>多表查询 Spring Boot Jpa 中有两种实现方式，第一种是利用 Hibernate 的级联查询来实现，第二种是创建一个结果集的接口来接收连表查询后的结果，这里主要第二种方式。</p>

<p>首先需要定义一个结果集的接口类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HotelSummary</span> <span class="o">{</span>

	<span class="nc">City</span> <span class="nf">getCity</span><span class="o">();</span>

	<span class="nc">String</span> <span class="nf">getName</span><span class="o">();</span>

	<span class="nc">Double</span> <span class="nf">getAverageRating</span><span class="o">();</span>

	<span class="k">default</span> <span class="nc">Integer</span> <span class="nf">getAverageRatingRounded</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nf">getAverageRating</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">getAverageRating</span><span class="o">());</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>查询的方法返回类型设置为新创建的接口</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Query</span><span class="o">(</span><span class="s">"select h.city as city, h.name as name, avg(r.rating) as averageRating "</span>
		<span class="o">-</span> <span class="s">"from Hotel h left outer join h.reviews r where h.city = ?1 group by h"</span><span class="o">)</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">HotelSummary</span><span class="o">&gt;</span> <span class="nf">findByCity</span><span class="o">(</span><span class="nc">City</span> <span class="n">city</span><span class="o">,</span> <span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>

<span class="nd">@Query</span><span class="o">(</span><span class="s">"select h.name as name, avg(r.rating) as averageRating "</span>
		<span class="o">-</span> <span class="s">"from Hotel h left outer join h.reviews r  group by h"</span><span class="o">)</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">HotelSummary</span><span class="o">&gt;</span> <span class="nf">findByCity</span><span class="o">(</span><span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<p>使用</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Page&lt;HotelSummary&gt; hotels = this.hotelRepository.findByCity(new PageRequest(0, 10, Direction.ASC, "name"));
for(HotelSummary summay:hotels){
		System.out.println("Name" +summay.getName());
	}
</code></pre></div></div>

<blockquote>
  <p>在运行中 Spring 会给接口（HotelSummary）自动生产一个代理类来接收返回的结果，代码汇总使用 <code class="highlighter-rouge">getXX</code>的形式来获取</p>
</blockquote>

<h2 id="多数据源的支持">多数据源的支持</h2>

<h3 id="同源数据库的多源支持">同源数据库的多源支持</h3>

<p>日常项目中因为使用的分布式开发模式，不同的服务有不同的数据源，常常需要在一个项目中使用多个数据源，因此需要配置 Spring Boot Jpa 对多数据源的使用，一般分一下为三步：</p>

<ul>
  <li>1 配置多数据源</li>
  <li>2 不同源的实体类放入不同包路径</li>
  <li>3 声明不同的包路径下使用不同的数据源、事务支持</li>
</ul>

<h3 id="异构数据库多源支持">异构数据库多源支持</h3>

<p>比如我们的项目中，即需要对 mysql 的支持，也需要对 Mongodb 的查询等。</p>

<p>实体类声明<code class="highlighter-rouge">@Entity</code> 关系型数据库支持类型、声明<code class="highlighter-rouge">@Document</code> 为 Mongodb 支持类型，不同的数据源使用不同的实体就可以了</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">PersonRepository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
 <span class="err">…</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
  <span class="err">…</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
 <span class="err">…</span>
<span class="o">}</span>

<span class="nd">@Document</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
  <span class="err">…</span>
<span class="o">}</span>
</code></pre></div></div>

<p>但是，如果 User 用户既使用 Mysql 也使用 Mongodb 呢，也可以做混合使用</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">JpaPersonRepository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
 <span class="err">…</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">MongoDBPersonRepository</span> <span class="kd">extends</span> <span class="nc">Repository</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
 <span class="err">…</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="nd">@Document</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
  <span class="err">…</span>
<span class="o">}</span>
</code></pre></div></div>

<p>也可以通过对不同的包路径进行声明，比如 A 包路径下使用 mysql,B 包路径下使用 MongoDB</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@EnableJpaRepositories(basePackages = "com.neo.repositories.jpa")
@EnableMongoRepositories(basePackages = "com.neo.repositories.mongo")
interface Configuration { }
</code></pre></div></div>

<h2 id="其它">其它</h2>

<p><strong>使用枚举</strong></p>

<p>使用枚举的时候，我们希望数据库中存储的是枚举对应的 String 类型，而不是枚举的索引值，需要在属性上面添加<code class="highlighter-rouge">	@Enumerated(EnumType.STRING) </code> 注解</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Enumerated(EnumType.STRING) 
@Column(nullable = true)
private UserType type;
</code></pre></div></div>

<p><strong>不需要和数据库映射的属性</strong></p>

<p>正常情况下我们在实体类上加入注解<code class="highlighter-rouge">@Entity</code>，就会让实体类和表相关连如果其中某个属性我们不需要和数据库来关联只是在展示的时候做计算，只需要加上<code class="highlighter-rouge">@Transient</code>属性既可。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Transient
private String  userName;
</code></pre></div></div>

<p><strong>源码案例</strong></p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-jpa">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples/tree/master/spring-boot-jpa">示例代码-码云</a></strong></p>

<blockquote>
  <p>文章内容已经升级到 Spring Boot 2.x</p>
</blockquote>

<h2 id="参考">参考</h2>

<p><a href="http://docs.spring.io/spring-data/jpa/docs/current/reference/html/">Spring Data JPA - Reference Documentation</a></p>

<p><a href="https://www.gitbook.com/book/ityouknow/spring-data-jpa-reference-documentation/details">Spring Data JPA——参考文档 中文版</a></p>
:ET