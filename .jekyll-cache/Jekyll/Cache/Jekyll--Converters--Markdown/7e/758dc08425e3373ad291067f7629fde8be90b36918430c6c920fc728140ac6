I"8<p>by 千阳</p>

<p>本节主要介绍 multiprocessing 多进程模块，由于 threading 多线程模块无法充分利用电脑的多核优势，而在实际开发中会对系统性能有较高的要求，就需要使用多进程来充分利用多核 cpu 的资源，下面详细介绍 Python 中的 multiprocessing。</p>

<!--more-->

<p>multiprocessing 多进程模块有类似 threading 模块的 API 接口，方便熟悉 threading 的用户直接使用 multiprocessing。它支持子进程、通信和共享数据、执行不同形式的同步，下面简单介绍下几个常用的组件。</p>

<h3 id="process类">Process类</h3>

<p>在 multiprocessing 中生成进程的方式是通过创建一个 Process 对象，然后调用它的 <code class="highlighter-rouge">start()</code> 方法来实现。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'hello'</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="s">'world'</span><span class="p">,))</span>
    <span class="c1">#启动进程
</span>    <span class="n">p</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="c1">#实现进程间的同步，等待所有进程退出
</span>    <span class="n">p</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>

<span class="c1">#执行结果：
</span><span class="n">hello</span> <span class="n">world</span>
</code></pre></div></div>

<p>需要注意的是，在上面示例代码中使用了<code class="highlighter-rouge">if __name__ == '__main__'</code>，这行代码是符合编程规范的。加上它可以确保主模块能够被新启动的 Python 解释器安全导入。</p>

<p>在启动进程的过程中，需要考虑执行顺序的问题，正常情况下是主进程先执行，子进程后执行。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#主子进程执行顺序
</span><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="k">def</span> <span class="nf">run</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"子进程开启"</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"子进程结束"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"主进程启动"</span><span class="p">)</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">run</span><span class="p">)</span>
    <span class="n">p</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"主进程结束"</span><span class="p">)</span>

<span class="c1">#执行结果：
</span><span class="n">主进程启动</span>
<span class="n">主进程结束</span>
<span class="n">子进程开启</span>
<span class="n">子进程结束</span>
</code></pre></div></div>

<h3 id="queue类">Queue类</h3>

<p>因为不同进程之间内存是不共享的，要想实现进程间的通信，必须要提供中间的媒介。Python 提供了两个通信的对象类。一个是 Queue 类，另一个是 Pipe 类。</p>

<p>Queue 队列使用一个管道和少量锁和信号量实现的共享队列实例，它是线程和进程安全的，常被用于两个进程之间的通讯。例如有一个 wirte 进程负责写数据，另外一个 read 进程负责读数据。当我们需要将写的数据交给读的进程时，可以通过 Queue 作为中间桥梁，先把 write 进程写的数据交给队列，再由队列将数据传递给 read 进程。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Queue队列
</span><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Queue</span>
<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
    <span class="n">q</span><span class="p">.</span><span class="n">put</span><span class="p">([</span><span class="mi">11</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="s">'lily'</span><span class="p">])</span>
<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">()</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">q</span><span class="p">,))</span>
    <span class="n">p</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">get</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>

<span class="c1">#执行结果：
</span><span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="s">'lily'</span><span class="p">]</span>
</code></pre></div></div>

<p>在上述示例中调用了 <code class="highlighter-rouge">join()</code>函数，它可以阻塞主进程，直到调用 <code class="highlighter-rouge">join()</code>函数的进程终止。该函数有一个可选的参数 timeout，参数 timeout 的默认值是 None。如果 timeout 是一个正数，它最多会阻塞 timeout 秒。</p>

<h3 id="pipe类">Pipe类</h3>

<p>Pipe 和 Queue 一样，可以作为进程之间通信的通道。<code class="highlighter-rouge">Pipe()</code>函数返回两个对象 <code class="highlighter-rouge">conn1</code> 和 <code class="highlighter-rouge">conn2</code> ，这两个对象表示管道的两端。</p>

<p><code class="highlighter-rouge">Pipe()</code>函数有一个可选参数 duplex，参数 duplex 的默认值为 True，表示该管道是双向的，即两个对象都可以发送和接收消息。如果把参数 duplex 设置为 False ，表示该管道是单向的，即 <code class="highlighter-rouge">conn1</code> 只能用于接收消息，<code class="highlighter-rouge">conn2</code> 只能用于发送消息。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Pipe</span>
<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">conn</span><span class="p">):</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">send</span><span class="p">([</span><span class="mi">11</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="s">'lily'</span><span class="p">])</span>
    <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">conn1</span><span class="p">,</span> <span class="n">conn2</span> <span class="o">=</span> <span class="n">Pipe</span><span class="p">()</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">conn2</span><span class="p">,))</span>
    <span class="n">p</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">conn1</span><span class="p">.</span><span class="n">recv</span><span class="p">())</span>
    <span class="n">p</span><span class="p">.</span><span class="n">join</span><span class="p">()</span>

<span class="c1">#执行结果：
</span><span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="s">'lily'</span><span class="p">]</span>
</code></pre></div></div>

<p>从以上示例可以看出，Queue 和 Pipe 拥有相似的功能。但在日常开发中，两者使用的场景有所不同，Pipe 多用于两个进程间通信，而 Queue 则多用于两个及以上进程间的通信。</p>

<h3 id="lock类">Lock类</h3>

<p>由于多线程共享进程的资源和地址空间，因此，在对这些公共资源进行操作时，为了防止这些公共资源出现异常的结果，必须考虑线程的同步和互斥问题。</p>

<p>为了保证进程间的同步，我们可以使用 Lock 类给线程或者进程加锁。Lock 返回的是一个非递归锁对象，Lock 实际上是一个工厂函数。它返回由默认上下文初始化的 multiprocessing.synchronize.Lock 对象。</p>

<p>一旦某一个进程或者线程拿到了锁，后续的任何其他进程或线程的其他请求都会被阻塞直到锁被释放。例如：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span><span class="kn">from</span> <span class="nn">multiprocessing</span> <span class="kn">import</span> <span class="n">Process</span><span class="p">,</span> <span class="n">Lock</span>
<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
    <span class="n">l</span><span class="p">.</span><span class="n">acquire</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'this is'</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="n">l</span><span class="p">.</span><span class="n">release</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">lock</span> <span class="o">=</span> <span class="n">Lock</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">f</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">lock</span><span class="p">,</span> <span class="n">num</span><span class="p">)).</span><span class="n">start</span><span class="p">()</span>

<span class="c1">#执行结果：
</span><span class="n">this</span> <span class="ow">is</span> <span class="mi">0</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">2</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">3</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">4</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">1</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">5</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">6</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">7</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">8</span>
<span class="n">this</span> <span class="ow">is</span> <span class="mi">9</span>

</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>本节给大家介绍了 Python 中 multiprocessing 模块的常用操作，对于实现基于进程的并行操作提供了支撑，注意与 threading 模块基于线程的并行操作区分开。</p>

<blockquote>
  <p>示例代码：https://github.com/JustDoPython/python-100-day/tree/master/day-052</p>
</blockquote>

<p>参考
[1] https://docs.python.org/3.7/library/multiprocessing.html
[2] https://blog.csdn.net/brucewong0516/article/details/85796073</p>
:ET