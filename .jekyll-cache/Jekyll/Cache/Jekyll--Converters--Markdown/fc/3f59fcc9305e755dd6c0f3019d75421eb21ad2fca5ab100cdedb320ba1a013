I"R5<p>前面的文章我们介绍了，Eureka用于服务的注册于发现，Feign支持服务的调用以及均衡负载，Hystrix处理服务的熔断防止故障扩散，Spring Cloud Config服务集群配置中心，似乎一个微服务框架已经完成了。</p>

<p>我们还是少考虑了一个问题，外部的应用如何来访问内部各种各样的微服务呢？在微服务架构中，后端服务往往不直接开放给调用端，而是通过一个API网关根据请求的url，路由到相应的服务。当添加API网关后，在第三方调用端和服务提供方之间就创建了一面墙，这面墙直接与调用方通信进行权限控制，后将请求均衡分发给后台服务端。</p>

<h2 id="为什么需要api-gateway">为什么需要API Gateway</h2>

<p>1、简化客户端调用复杂度</p>

<p>在微服务架构模式下后端服务的实例数一般是动态的，对于客户端而言很难发现动态改变的服务实例的访问地址信息。因此在基于微服务的项目中为了简化前端的调用逻辑，通常会引入API Gateway作为轻量级网关，同时API Gateway中也会实现相关的认证逻辑从而简化内部服务之间相互调用的复杂度。</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/api_gateway.png" alt="" /></p>

<p>2、数据裁剪以及聚合</p>

<p>通常而言不同的客户端对于显示时对于数据的需求是不一致的，比如手机端或者Web端又或者在低延迟的网络环境或者高延迟的网络环境。</p>

<p>因此为了优化客户端的使用体验，API Gateway可以对通用性的响应数据进行裁剪以适应不同客户端的使用需求。同时还可以将多个API调用逻辑进行聚合，从而减少客户端的请求数，优化客户端用户体验</p>

<p>3、多渠道支持</p>

<p>当然我们还可以针对不同的渠道和客户端提供不同的API Gateway,对于该模式的使用由另外一个大家熟知的方式叫Backend for front-end, 在Backend for front-end模式当中，我们可以针对不同的客户端分别创建其BFF，进一步了解BFF可以参考这篇文章：<a href="http://samnewman.io/patterns/architectural/bff/">Pattern: Backends For Frontends</a></p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/bff.png" alt="" /></p>

<p>4、遗留系统的微服务化改造</p>

<p>对于系统而言进行微服务改造通常是由于原有的系统存在或多或少的问题，比如技术债务，代码质量，可维护性，可扩展性等等。API Gateway的模式同样适用于这一类遗留系统的改造，通过微服务化的改造逐步实现对原有系统中的问题的修复，从而提升对于原有业务响应力的提升。通过引入抽象层，逐步使用新的实现替换旧的实现。</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/bff-process.png" alt="" /></p>

<blockquote>
  <p>在Spring Cloud体系中， Spring Cloud Zuul就是提供负载均衡、反向代理、权限认证的一个API gateway。</p>
</blockquote>

<h2 id="spring-cloud-zuul">Spring Cloud Zuul</h2>

<p>Spring Cloud Zuul路由是微服务架构的不可或缺的一部分，提供动态路由，监控，弹性，安全等的边缘服务。Zuul是Netflix出品的一个基于JVM路由和服务端的负载均衡器。</p>

<p>下面我们通过代码来了解Zuul是如何工作的</p>

<h3 id="简单使用">简单使用</h3>

<p>1、添加依赖</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-zuul<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>引入<code class="highlighter-rouge">spring-cloud-starter-zuul</code>包</p>

<p>2、配置文件</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">gateway-service-zuul</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8888</span>

<span class="c">#这里的配置表示，访问/it/** 直接重定向到http://www.ityouknow.com/**
</span><span class="py">zuul.routes.baidu.path</span><span class="p">=</span><span class="s">/it/**</span>
<span class="py">zuul.routes.baidu.url</span><span class="p">=</span><span class="s">http://www.ityouknow.com/</span>
</code></pre></div></div>

<p>3、启动类</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="nd">@EnableZuulProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GatewayServiceZuulApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">GatewayServiceZuulApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动类添加<code class="highlighter-rouge">@EnableZuulProxy</code>，支持网关路由。</p>

<p>史上最简单的zuul案例就配置完了</p>

<p>4、测试</p>

<p>启动<code class="highlighter-rouge">gateway-service-zuul-simple</code>项目，在浏览器中访问：<code class="highlighter-rouge">http://localhost:8888/it/spring-cloud</code>，看到页面返回了：<code class="highlighter-rouge">http://www.ityouknow.com/spring-cloud</code> 页面的信息，如下：</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/zuul-01.jpg" alt="" /></p>

<p>我们以前面文章的示例代码<code class="highlighter-rouge">spring-cloud-producer</code>为例来测试请求的重定向，在配置文件中添加：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">zuul.routes.hello.path</span><span class="p">=</span><span class="s">/hello/**</span>
<span class="py">zuul.routes.hello.url</span><span class="p">=</span><span class="s">http://localhost:9000/</span>
</code></pre></div></div>

<p>启动<code class="highlighter-rouge">spring-cloud-producer</code>，重新启动<code class="highlighter-rouge">gateway-service-zuul-simple</code>，访问：<code class="highlighter-rouge">http://localhost:8888/hello/hello?name=%E5%B0%8F%E6%98%8E</code>，返回：<code class="highlighter-rouge">hello 小明，this is first messge</code></p>

<p>说明访问<code class="highlighter-rouge">gateway-service-zuul-simple</code>的请求自动转发到了<code class="highlighter-rouge">spring-cloud-producer</code>，并且将结果返回。</p>

<h3 id="服务化">服务化</h3>

<p>通过url映射的方式来实现zull的转发有局限性，比如每增加一个服务就需要配置一条内容，另外后端的服务如果是动态来提供，就不能采用这种方案来配置了。实际上在实现微服务架构时，服务名与服务实例地址的关系在eureka server中已经存在了，所以只需要将Zuul注册到eureka server上去发现其他服务，就可以实现对serviceId的映射。</p>

<p>我们结合示例来说明，在上面示例项目<code class="highlighter-rouge">gateway-service-zuul-simple</code>的基础上来改造。</p>

<p>1、添加依赖</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-eureka<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>增加<code class="highlighter-rouge">spring-cloud-starter-eureka</code>包，添加对eureka的支持。</p>

<p>2、配置文件</p>

<p>配置修改为：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">gateway-service-zuul</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8888</span>

<span class="py">zuul.routes.api-a.path</span><span class="p">=</span><span class="s">/producer/**</span>
<span class="py">zuul.routes.api-a.serviceId</span><span class="p">=</span><span class="s">spring-cloud-producer</span>

<span class="py">eureka.client.serviceUrl.defaultZone</span><span class="p">=</span><span class="s">http://localhost:8000/eureka/</span>
</code></pre></div></div>

<p>3、测试</p>

<p>依次启动 <code class="highlighter-rouge">spring-cloud-eureka</code>、 <code class="highlighter-rouge">spring-cloud-producer</code>、<code class="highlighter-rouge">gateway-service-zuul-eureka</code>，访问：<code class="highlighter-rouge">http://localhost:8888/producer/hello?name=%E5%B0%8F%E6%98%8E</code>，返回：<code class="highlighter-rouge">hello 小明，this is first messge</code></p>

<p>说明访问<code class="highlighter-rouge">gateway-service-zuul-eureka</code>的请求自动转发到了<code class="highlighter-rouge">spring-cloud-producer</code>，并且将结果返回。</p>

<p>为了更好的模拟服务集群，我们复制<code class="highlighter-rouge">spring-cloud-producer</code>项目改为<code class="highlighter-rouge">spring-cloud-producer-2</code>，修改<code class="highlighter-rouge">spring-cloud-producer-2</code>项目端口为9001，controller代码修改如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"hello "</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">"，this is two messge"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改完成后启动<code class="highlighter-rouge">spring-cloud-producer-2</code>，重启<code class="highlighter-rouge">gateway-service-zuul-eureka</code>。测试多次访问<code class="highlighter-rouge">http://localhost:8888/producer/hello?name=%E5%B0%8F%E6%98%8E</code>，依次返回：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello 小明，this is first messge
hello 小明，this is two messge
hello 小明，this is first messge
hello 小明，this is two messge
...
</code></pre></div></div>

<p>说明通过zuul成功调用了producer服务并且做了均衡负载。</p>

<p><strong>网关的默认路由规则</strong></p>

<p>但是如果后端服务多达十几个的时候，每一个都这样配置也挺麻烦的，spring cloud zuul已经帮我们做了默认配置。默认情况下，Zuul会代理所有注册到Eureka Server的微服务，并且Zuul的路由规则如下：<code class="highlighter-rouge">http://ZUUL_HOST:ZUUL_PORT/微服务在Eureka上的serviceId/**</code>会被转发到serviceId对应的微服务。</p>

<p>我们注销掉<code class="highlighter-rouge">gateway-service-zuul-eureka</code>项目中关于路由的配置：</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#zuul.routes.api-a.path=/producer/**
#zuul.routes.api-a.serviceId=spring-cloud-producer
</span></code></pre></div></div>

<p>重新启动后，访问<code class="highlighter-rouge">http://localhost:8888/spring-cloud-producer/hello?name=%E5%B0%8F%E6%98%8E</code>，测试返回结果和上述示例相同，说明Spring cloud zuul默认已经提供了转发功能。</p>

<p>到此zuul的基本使用我们就介绍完了。关于zuul更高级使用，我们下篇再来介绍。</p>

<p>参考：</p>

<p><a href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/">API网关那些儿</a></p>

<p><strong><a href="https://github.com/ityouknow/spring-cloud-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-cloud-examples">示例代码-码云</a></strong></p>

<hr />
<p><strong>作者：纯洁的微笑</strong><br />
<strong>出处：<a href="http://www.ityouknow.com/springcloud/2017/06/01/gateway-service-zuul.html">http://www.ityouknow.com/</a></strong>    <br />
<strong>版权归作者所有，转载请注明出处</strong></p>
:ET