I"/<p>在前两篇的介绍中，客户端都是直接调用配置中心的server端来获取配置文件信息。这样就存在了一个问题，客户端和服务端的耦合性太高，如果server端要做集群，客户端只能通过原始的方式来路由，server端改变IP地址的时候，客户端也需要修改配置，不符合springcloud服务治理的理念。springcloud提供了这样的解决方案，我们只需要将server端当做一个服务注册到eureka中，client端去eureka中去获取配置中心server端的服务既可。</p>

<p>这篇文章我们基于配置中心git版本的内容来改造</p>

<h2 id="server端改造">server端改造</h2>

<h3 id="1添加依赖">1、添加依赖</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-eureka<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>需要多引入<code class="highlighter-rouge">spring-cloud-starter-eureka</code>包，来添加对eureka的支持。</p>

<h3 id="2配置文件">2、配置文件</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">server</span><span class="p">:</span>
<span class="py">server</span><span class="p">:</span>
  <span class="py">port</span><span class="p">:</span> <span class="s">8001</span>
<span class="py">spring</span><span class="p">:</span>
  <span class="py">application</span><span class="p">:</span>
    <span class="py">name</span><span class="p">:</span> <span class="s">spring-cloud-config-server</span>
  <span class="py">cloud</span><span class="p">:</span>
    <span class="py">config</span><span class="p">:</span>
      <span class="py">server</span><span class="p">:</span>
        <span class="py">git</span><span class="p">:</span>
          <span class="py">uri</span><span class="p">:</span> <span class="s">https://github.com/ityouknow/spring-cloud-starter/     # 配置git仓库的地址</span>
          <span class="py">search-paths</span><span class="p">:</span> <span class="s">config-repo                             # git仓库地址下的相对地址，可以配置多个，用,分割。</span>
          <span class="py">username</span><span class="p">:</span> <span class="s">username                                        # git仓库的账号</span>
          <span class="py">password</span><span class="p">:</span> <span class="s">password                                    # git仓库的密码</span>
<span class="py">eureka</span><span class="p">:</span>
  <span class="py">client</span><span class="p">:</span>
    <span class="py">serviceUrl</span><span class="p">:</span>
      <span class="py">defaultZone</span><span class="p">:</span> <span class="s">http://localhost:8000/eureka/   ## 注册中心eurka地址</span>
</code></pre></div></div>

<p>增加了eureka注册中心的配置</p>

<h3 id="3启动类">3、启动类</h3>

<p>启动类添加<code class="highlighter-rouge">@EnableDiscoveryClient</code>激活对注册中心的支持</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableDiscoveryClient</span>
<span class="nd">@EnableConfigServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigServerApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ConfigServerApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样server端的改造就完成了。先启动eureka注册中心，在启动server端，在浏览器中访问：<code class="highlighter-rouge">http://localhost:8000/</code> 就会看到server端已经注册了到注册中心了。</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/eureka-config01.jpg" alt="" /></p>

<p>按照上篇的测试步骤对server端进行测试服务正常。</p>

<h2 id="客户端改造">客户端改造</h2>

<h3 id="1添加依赖-1">1、添加依赖</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-config<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-cloud-starter-eureka<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>需要多引入<code class="highlighter-rouge">spring-cloud-starter-eureka</code>包，来添加对eureka的支持。</p>

<h3 id="2配置文件-1">2、配置文件</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.application.name</span><span class="p">=</span><span class="s">spring-cloud-config-client</span>
<span class="py">server.port</span><span class="p">=</span><span class="s">8002</span>

<span class="py">spring.cloud.config.name</span><span class="p">=</span><span class="s">neo-config</span>
<span class="py">spring.cloud.config.profile</span><span class="p">=</span><span class="s">dev</span>
<span class="py">spring.cloud.config.label</span><span class="p">=</span><span class="s">master</span>
<span class="py">spring.cloud.config.discovery.enabled</span><span class="p">=</span><span class="s">true</span>
<span class="py">spring.cloud.config.discovery.serviceId</span><span class="p">=</span><span class="s">spring-cloud-config-server</span>

<span class="py">eureka.client.serviceUrl.defaultZone</span><span class="p">=</span><span class="s">http://localhost:8000/eureka/</span>
</code></pre></div></div>

<p>主要是去掉了<code class="highlighter-rouge">spring.cloud.config.uri</code>直接指向server端地址的配置，增加了最后的三个配置：</p>

<ul>
  <li><code class="highlighter-rouge">spring.cloud.config.discovery.enabled</code> ：开启Config服务发现支持</li>
  <li><code class="highlighter-rouge">spring.cloud.config.discovery.serviceId</code> ：指定server端的name,也就是server端<code class="highlighter-rouge">spring.application.name</code>的值</li>
  <li><code class="highlighter-rouge">eureka.client.serviceUrl.defaultZone</code> ：指向注册中心的地址</li>
</ul>

<p>这三个配置文件都需要放到<code class="highlighter-rouge">bootstrap.properties</code>的配置中</p>

<h3 id="3启动类-1">3、启动类</h3>

<p>启动类添加<code class="highlighter-rouge">@EnableDiscoveryClient</code>激活对配置中心的支持</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableDiscoveryClient</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigClientApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ConfigClientApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动client端，在浏览器中访问：<code class="highlighter-rouge">http://localhost:8000/</code> 就会看到server端和client端都已经注册了到注册中心了。</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/eureka-config02.jpg" alt="" /></p>

<h2 id="高可用">高可用</h2>

<p>为了模拟生产集群环境，我们改动server端的端口为8003，再启动一个server端来做服务的负载，提供高可用的server端支持。</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/eureka-config03.jpg" alt="" /></p>

<p>如上图就可发现会有两个server端同时提供配置中心的服务，防止某一台down掉之后影响整个系统的使用。</p>

<p>我们先单独测试服务端，分别访问：<code class="highlighter-rouge">http://localhost:8001/neo-config/dev</code>、<code class="highlighter-rouge">http://localhost:8003/neo-config/dev</code>返回信息：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "name": "neo-config", 
    "profiles": [
        "dev"
    ], 
    "label": null, 
    "version": null, 
    "state": null, 
    "propertySources": [
        {
            "name": "https://github.com/ityouknow/spring-cloud-starter/config-repo/neo-config-dev.properties", 
            "source": {
                "neo.hello": "hello im dev"
            }
        }
    ]
}
</code></pre></div></div>

<p>说明两个server端都正常读取到了配置信息。</p>

<p>再次访问：<code class="highlighter-rouge">http://localhost:8002/hello</code>，返回：<code class="highlighter-rouge">hello im dev update</code>。说明客户端已经读取到了server端的内容，我们随机停掉一台server端的服务，再次访问<code class="highlighter-rouge">http://localhost:8002/hello</code>，返回：<code class="highlighter-rouge">hello im dev update</code>，说明达到了高可用的目的。</p>

<p><strong><a href="https://github.com/ityouknow/spring-cloud-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-cloud-examples">示例代码-码云</a></strong></p>
:ET