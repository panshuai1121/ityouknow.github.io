I"KT<p>MyBatis-Plus 是 MyBatis 的第三方使用插件。</p>

<p>前两天在公众号中发了<a href="http://www.ityouknow.com/springboot/2016/11/06/spring-boot-mybatis.html">《Spring Boot(六)：如何优雅的使用 Mybatis》</a>，有朋友留言说能不能写一下整合 MyBatis-Plus 的教程。</p>

<p>在这之前我对 MyBatis-Plus 其实了解不是很多，一般情况下也不太愿意使用第三方的组件。找时间了解了一下 MyBatis-Plus 发现还是国人出品的开源项目，并且在 Github 上有 5000 多个关注，说明在国内使用的用户已经不少。</p>

<p>这篇文章就给大家介绍一下，如何在 Spring Boot 中整合 MyBatis-Plus 使用 MyBatis。</p>

<h2 id="mybatis-plus-介绍">MyBatis-Plus 介绍</h2>

<p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>

<blockquote>
  <p>官方愿景：成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。</p>
</blockquote>

<p>根据愿景甚至还设置了一个很酷的 Logo。</p>

<p><img src="https://mp.baomidou.com/img/relationship-with-mybatis.png" alt="" /></p>

<blockquote>
  <p>官网地址：https://mybatis.plus/，本文大部分内容参考自官网。</p>
</blockquote>

<p><strong>特性</strong></p>

<p>官网说的特性太多了，挑了几个有特点的分享给大家。</p>

<ul>
  <li>无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
  <li>损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>
  <li>强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>
  <li>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
  <li>支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库</li>
  <li>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
</ul>

<h2 id="快速上手">快速上手</h2>

<h3 id="准备数据">准备数据</h3>

<p>我们首先设计一个这样的用户表，如下：</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>name</th>
      <th>age</th>
      <th>email</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>neo</td>
      <td>18</td>
      <td>smile1@baomidou.com</td>
    </tr>
    <tr>
      <td>2</td>
      <td>keep</td>
      <td>36</td>
      <td>smile2@baomidou.com</td>
    </tr>
    <tr>
      <td>3</td>
      <td>pure</td>
      <td>28</td>
      <td>smile3@baomidou.com</td>
    </tr>
    <tr>
      <td>4</td>
      <td>smile</td>
      <td>21</td>
      <td>smile4@baomidou.com</td>
    </tr>
    <tr>
      <td>5</td>
      <td>it</td>
      <td>24</td>
      <td>smile5@baomidou.com</td>
    </tr>
  </tbody>
</table>

<p>我们要创建两个 Sql 文件，以便项目启动的时候，将表结构和数据初始化到数据库。</p>

<p>表结构文件（schema-h2.sql）内容：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DROP TABLE IF EXISTS user;

CREATE TABLE user
(
	id BIGINT(20) NOT NULL COMMENT '主键ID',
	name VARCHAR(30) NULL DEFAULT NULL COMMENT '姓名',
	age INT(11) NULL DEFAULT NULL COMMENT '年龄',
	email VARCHAR(50) NULL DEFAULT NULL COMMENT '邮箱',
	PRIMARY KEY (id)
);
</code></pre></div></div>

<p>表数据文件（data-h2.sql）内容：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INSERT INTO user (id, name, age, email) VALUES
(1, 'neo', 18, 'smile1@ityouknow.com'),
(2, 'keep', 36, 'smile2@ityouknow.com'),
(3, 'pure', 28, 'smile3@ityouknow.com'),
(4, 'smile', 21, 'smile4@ityouknow.com'),
(5, 'it', 24, 'smile5@ityouknow.com');
</code></pre></div></div>

<p>在示例项目的 resources 目录下创建 db 文件夹，将两个文件放入其中。</p>

<h3 id="添加依赖">添加依赖</h3>

<p>添加相关依赖包，pom.xml 中的相关依赖内容如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependencies&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
		&lt;artifactId&gt;lombok&lt;/artifactId&gt;
		&lt;optional&gt;true&lt;/optional&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.baomidou&lt;/groupId&gt;
		&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
		&lt;version&gt;3.1.1&lt;/version&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;com.h2database&lt;/groupId&gt;
		&lt;artifactId&gt;h2&lt;/artifactId&gt;
		&lt;scope&gt;runtime&lt;/scope&gt;
	&lt;/dependency&gt;
	&lt;dependency&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
		&lt;scope&gt;test&lt;/scope&gt;
	&lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre></div></div>

<ul>
  <li>lombok，帮忙省略掉 Get/Set 方法，<a href="http://www.justdojava.com/2019/05/01/java-lombok/">具体可以参考这篇文章</a></li>
  <li>mybatis-plus-boot-starter，MyBatis Plus 的依赖包</li>
  <li>h2，本次测试我们使用内存数据库 h2 来演示。</li>
  <li>spring-boot-starter-test，Spring Boot 的测试包</li>
</ul>

<h3 id="配置文件">配置文件</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># DataSource Config
spring:
    datasource:
        driver-class-name: org.h2.Driver
        schema: classpath:db/schema-h2.sql
        data: classpath:db/data-h2.sql
        url: jdbc:h2:mem:test
        username: root
        password: test

# Logger Config
logging:
    level:
      com.neo: debug
</code></pre></div></div>

<p>配置了 h2 数据库，已经项目的日志级别。配置 schema 和 data 后，项目启动时会根据配置的文件地址来执行数据。</p>

<h3 id="业务代码">业务代码</h3>

<p>创建 MybatisPlusConfig 类，指定 Mapper 地址，启用分页功能。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@MapperScan</span><span class="o">(</span><span class="s">"com.neo.mapper"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MybatisPlusConfig</span> <span class="o">{</span>

    <span class="cm">/**
     * 分页插件
     */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">PaginationInterceptor</span> <span class="nf">paginationInterceptor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">PaginationInterceptor</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>创建实体类 User</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">@Data</code> 为 lombok 语法，自动注入 getter/setter 方法。</p>

<p>接下来创建对象对于的 Mapper。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="kd">extends</span> <span class="nc">BaseMapper</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>以上业务代码就开发完成了，是不是很简单。</p>

<h3 id="测试">测试</h3>

<p>创建 MyBatisPlusTest 类，注入上面创建的 UserMapper 类。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBatisPlusTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserMapper</span> <span class="n">userMapper</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试查询单挑数据，并输出</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelectOne</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="mi">1L</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试添加数据</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testInsert</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"微笑"</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="n">user</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"neo@tooool.org"</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">userMapper</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">user</span><span class="o">)).</span><span class="na">isGreaterThan</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="c1">// 成功直接拿会写的 ID</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">isNotNull</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>assertThat() 是 Assert 的一个精通方法，用来比对返回结果，包来自<code class="highlighter-rouge">import static org.assertj.core.api.Assertions.assertThat;</code>。</p>

<p>测试删除数据</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testDelete</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">userMapper</span><span class="o">.</span><span class="na">deleteById</span><span class="o">(</span><span class="mi">3L</span><span class="o">)).</span><span class="na">isGreaterThan</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">userMapper</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="k">new</span> <span class="nc">QueryWrapper</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;()</span>
            <span class="o">.</span><span class="na">lambda</span><span class="o">().</span><span class="na">eq</span><span class="o">(</span><span class="nl">User:</span><span class="o">:</span><span class="n">getName</span><span class="o">,</span> <span class="s">"smile"</span><span class="o">))).</span><span class="na">isGreaterThan</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">QueryWrapper</code> 是 MyBatis-Plus 内部辅助查询类，可以使用 lambda 语法，也可以不使用。利用 QueryWrapper 类可以构建各种查询条件。</p>

<p>测试更新数据</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getAge</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">36</span><span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"keep"</span><span class="o">);</span>

    <span class="n">userMapper</span><span class="o">.</span><span class="na">update</span><span class="o">(</span>
            <span class="kc">null</span><span class="o">,</span>
            <span class="nc">Wrappers</span><span class="o">.&lt;</span><span class="nc">User</span><span class="o">&gt;</span><span class="n">lambdaUpdate</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="nl">User:</span><span class="o">:</span><span class="n">getEmail</span><span class="o">,</span> <span class="s">"123@123"</span><span class="o">).</span><span class="na">eq</span><span class="o">(</span><span class="nl">User:</span><span class="o">:</span><span class="n">getId</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">userMapper</span><span class="o">.</span><span class="na">selectById</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="na">getEmail</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"123@123"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试查询所有数据</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSelect</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">userList</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectList</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
    <span class="nc">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">userList</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
    <span class="n">userList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>测试非分页查询</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPage</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----- baseMapper 自带分页 ------"</span><span class="o">);</span>
    <span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">page</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Page</span><span class="o">&lt;&gt;(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
    <span class="nc">IPage</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">userIPage</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectPage</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="k">new</span> <span class="nc">QueryWrapper</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;()</span>
            <span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="s">"age"</span><span class="o">,</span> <span class="mi">6</span><span class="o">));</span>
    <span class="n">assertThat</span><span class="o">(</span><span class="n">page</span><span class="o">).</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">userIPage</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"总条数 ------&gt; "</span> <span class="o">+</span> <span class="n">userIPage</span><span class="o">.</span><span class="na">getTotal</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前页数 ------&gt; "</span> <span class="o">+</span> <span class="n">userIPage</span><span class="o">.</span><span class="na">getCurrent</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"当前每页显示数 ------&gt; "</span> <span class="o">+</span> <span class="n">userIPage</span><span class="o">.</span><span class="na">getSize</span><span class="o">());</span>
    <span class="n">print</span><span class="o">(</span><span class="n">userIPage</span><span class="o">.</span><span class="na">getRecords</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"----- baseMapper 自带分页 ------"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>查询大于 6 岁的用户，并且分页展示，每页两条数据，展示第一页。</p>

<h2 id="总结">总结</h2>

<p>简单使用了一下 MyBatis-Plus 感觉是一款挺不错的 MyBatis 插件，使用 MyBatis-Plus 操作数据库确实可以少写一些代码，另外 MyBatis-Plus 的功能比较丰富，文中仅展示了常用的增删改查和分页查询，如果想进一步学习可以关注官网示例。</p>

<h2 id="示例代码">示例代码</h2>

<p>全网最全的 Spring Boot 学习示例项目，击下方链接即可获取。</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>

<p>参考出处：</p>

<p>https://mp.baomidou.com/guide</p>
:ET