I"i;<p>Jenkins 是 Devops 神器，本篇文章介绍如何安装和使用 Jenkins 部署 Spring Boot 项目</p>

<p>Jenkins 搭建、部署分为四个步骤；</p>

<ul>
  <li>第一步，Jenkins 安装</li>
  <li>第二步，插件安装和配置</li>
  <li>第三步，Push SSH</li>
  <li>第四步，部署项目</li>
</ul>

<h2 id="第一步-jenkins-安装">第一步 ，Jenkins 安装</h2>

<p>准备环境：</p>

<p>JDK:1.8<br />
Jenkins:2.83
Centos:7.3<br />
maven 3.5</p>

<blockquote>
  <p>Jdk 默认已经安装完成</p>
</blockquote>

<h3 id="配置-maven">配置 Maven</h3>

<p>版本要求 Maven3.5.0</p>

<p>软件下载</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.tar.gz
</code></pre></div></div>

<p>安装</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 解压</span>
<span class="nb">tar </span>vxf apache-maven-3.5.0-bin.tar.gz
<span class="c">## 移动</span>
<span class="nb">mv </span>apache-maven-3.5.0 /usr/local/maven3
</code></pre></div></div>

<p>修改环境变量，
在<code class="highlighter-rouge">/etc/profile</code>中添加以下几行</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/local/maven3
<span class="nb">export </span>MAVEN_HOME
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:<span class="k">${</span><span class="nv">MAVEN_HOME</span><span class="k">}</span>/bin
</code></pre></div></div>

<p>记得执行<code class="highlighter-rouge">source /etc/profile</code>使环境变量生效。</p>

<p>验证
最后运行<code class="highlighter-rouge">mvn -v</code>验证maven是否安装成功</p>

<h3 id="配置防护墙">配置防护墙</h3>

<p>关闭防护墙</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#centos7</span>
systemctl stop firewalld.service
<span class="o">==============================</span>
<span class="c">#以下为：centOS 6.5关闭防火墙步骤</span>
<span class="c">#关闭命令：  </span>
service iptables stop 
<span class="c">#永久关闭防火墙：</span>
chkconfig iptables off
</code></pre></div></div>

<p>两个命令同时运行，运行完成后查看防火墙关闭状态</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service iptables status
</code></pre></div></div>

<h3 id="jenkins-安装">Jenkins 安装</h3>

<p>下载</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /opt
wget http://mirrors.jenkins.io/war/2.83/jenkins.war
</code></pre></div></div>

<p>启动服务</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> jenkins.war &amp;
</code></pre></div></div>

<p>Jenkins 就启动成功了！它的war包自带Jetty服务器</p>

<p>第一次启动 Jenkins 时，出于安全考虑，Jenkins 会自动生成一个随机的按照口令。<strong>注意控制台输出的口令，复制下来</strong>，然后在浏览器输入密码：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO: 

<span class="k">*************************************************************</span>
<span class="k">*************************************************************</span>
<span class="k">*************************************************************</span>

Jenkins initial setup is required. An admin user has been created and a password generated.
Please use the following password to proceed to installation:

0cca37389e6540c08ce6e4c96f46da0f

This may also be found at: /root/.jenkins/secrets/initialAdminPassword

<span class="k">*************************************************************</span>
<span class="k">*************************************************************</span>
<span class="k">*************************************************************</span>
</code></pre></div></div>

<p>访问
浏览器访问：<code class="highlighter-rouge">http://localhost:8080/</code></p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/1.png" alt="" /></p>

<p>输入：0cca37389e6540c08ce6e4c96f46da0f</p>

<p>进入用户自定义插件界面，建议选择安装官方推荐插件，因为安装后自己也得安装:</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/2.png" alt="" /></p>

<p>接下来是进入插件安装进度界面:</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/3.png" alt="" /></p>

<p>插件一次可能不会完全安装成功，可以点击Retry再次安装。直到全部安装成功</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/32.png" alt="" /></p>

<p>等待一段时间之后，插件安装完成，配置用户名密码:</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/4.png" alt="" /></p>

<p>输入：admin/admin</p>

<p>系统管理-》全局工具配置  jdk路径，</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/5.png" alt="" /></p>

<h2 id="第二步插件安装和配置">第二步，插件安装和配置</h2>

<p>有很多插件都是选择的默认的安装的，所以现在需要我们安装的插件不多，Git plugin 和 Maven Integration plugin，publish over SSH。</p>

<p>插件安装：系统管理 &gt; 插件管理 &gt; 可选插件,勾选需要安装的插件，点击直接安装或者下载重启后安装</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/6.png" alt="" /></p>

<h3 id="配置全局变量">配置全局变量</h3>

<p>系统管理 &gt; 全局工具配置</p>

<p><strong>JDK</strong></p>

<p>配置本地 JDK 的路径，去掉勾选自动安装</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/7.png" alt="" /></p>

<p><strong>Maven</strong></p>

<p>配置本地maven的路径，去掉勾选自动安装</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/8.png" alt="" /></p>

<p>其它内容可以根据自己的情况选择安装。</p>

<h3 id="使用密钥方式登录目标发布服务器">使用密钥方式登录目标发布服务器</h3>

<p>ssh 的配置可使用密钥，也可以使用密码，这里我们使用密钥来配置，在配置之前先配置好jenkins服务器和应用服务器的密钥认证
<strong>Jenkins服务器</strong>上生成密钥对，使用<code class="highlighter-rouge">ssh-keygen -t rsa</code>命令</p>

<p>输入下面命令 一直回车，一个矩形图形出现就说明成功，在~/.ssh/下会有私钥id_rsa和公钥id_rsa.pub</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa
</code></pre></div></div>

<p>将<strong>jenkins服务器</strong>的公钥<code class="highlighter-rouge">id_rsa.pub</code>中的内容复制到<strong>应用服务器</strong> 的~/.ssh/下的 <code class="highlighter-rouge">authorized_keys</code>文件</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-copy-id <span class="nt">-i</span> id_rsa.pub 192.168.0.xx
<span class="nb">chmod </span>644 authorized_keys
</code></pre></div></div>

<p>在<strong>应用服务器</strong>上重启 ssh 服务，<code class="highlighter-rouge">service sshd restart</code>现在 Jenkins 服务器可免密码直接登陆应用服务器</p>

<p>之后在用 ssh B<ip>尝试能否免密登录 B 服务器，如果还是提示需要输入密码，则有以下原因</ip></p>

<ul>
  <li>a. 非 root 账户可能不支持 ssh 公钥认证（看服务器是否有限制）</li>
  <li>b. 传过来的公钥文件权限不够，可以给这个文件授权下  chmod 644 authorized_keys</li>
  <li>c. 使用 root 账户执行 ssh-copy-id -i ~/.ssh/id_rsa.pub <IP> 这个指令的时候如果需要输入密码则要配置sshd_config</IP></li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /etc/ssh/sshd_config
<span class="c">#内容</span>
PermitRootLogin no
</code></pre></div></div>

<p>修改完后要重启 sshd 服务</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service sshd restart
</code></pre></div></div>

<p>最后，如果可以 SSH IP 免密登录成功说明 SSH 公钥认证成功。</p>

<p><strong>上面这种方式比较复杂，其实在 Jenkins 后台直接添加操作即可，参考下面方式</strong></p>

<h3 id="使用用户名密码方式登录目标发布服务器">使用用户名+密码方式登录目标发布服务器</h3>

<p>(1)点击”高级”展开配置</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/40.png" alt="" /></p>

<p>(2)配置SSH的登陆密码</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/41.png" alt="" /></p>

<p>配置完成后可点击“Test Configuration”测试到目标主机的连接，出现”success“则成功连接，如果有多台应用服务器，可以点击”增加“，配置多个“SSH Servers” 点击“保存”以保存配置。</p>

<h2 id="第三步push-ssh">第三步，Push SSH</h2>

<p>系统管理 &gt; 系统设置</p>

<p>选择 Publish over SSH</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/9.png" alt="" /></p>

<p>Passphrase 不用设置
Path to key 写上生成的ssh路径：<code class="highlighter-rouge">/root/.ssh/id_rsa</code></p>

<p>下面的 SSH Servers 是重点</p>

<ul>
  <li>Name 随意起名代表这个服务，待会要根据它来选择</li>
  <li>Hostname 配置应用服务器的地址</li>
  <li>Username 配置 linux 登陆用户名</li>
  <li>Remote Directory 不填</li>
</ul>

<blockquote>
  <p>点击下方增加可以添加多个应用服务器的地址</p>
</blockquote>

<h2 id="第四步部署项目">第四步，部署项目</h2>

<p>首页点击<strong>新建</strong>：输入项目名称</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/10.png" alt="" /></p>

<p>下方选择构建一个 Maven 项目，点击确定。</p>

<p>勾选<strong>丢弃旧的构建</strong>，选择是否备份被替换的旧包。我这里选择备份最近的10个</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/12.png" alt="" /></p>

<p>源码管理，选择 SVN，配置 SVN 相关信息，点击 add 可以输入 SVN 的账户和密码</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/11.png" alt="" /></p>

<p>SVN  地址：http://192.168.0.xx/svn/xxx@HEAD,<code class="highlighter-rouge">@HEAD</code>意思取最新版本</p>

<p>构建环境中勾选“Add timestamps to the Console Output”，代码构建的过程中会将日志打印出来</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/13.png" alt="" /></p>

<p>在 Build 中输入打包前的 mvn 命令，如：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clean <span class="nb">install</span> <span class="nt">-Dmaven</span>.test.skip<span class="o">=</span><span class="nb">true</span> <span class="nt">-Ptest</span>
</code></pre></div></div>

<p>意思是：排除测试的包内容，使用后缀为 test 的配置文件。</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/14.png" alt="" /></p>

<p>Post Steps 选择 Run only if build succeeds</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/15.png" alt="" /></p>

<p>点击<strong>Add post-build step</strong>，选择 Send files or execute commands over SSH</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/16.png" alt="" /></p>

<p>Name 选择上面配置的 Push SSH</p>

<p><img src="http://favorites.ren/assets/images/2017/jenkins/17.png" alt="" /></p>

<p>Source files配置:target/xxx-0.0.1-SNAPSHOT.jar 项目jar包名
Remove prefix:target/
Remote directory:Jenkins-in/ 代码应用服务器的目录地址，
Exec command：Jenkins-in/xxx.sh 应用服务器对应的脚本。</p>

<p>需要在应用服务器创建文件夹：Jenkins-in，在文件夹中复制一下脚本内容：xxx.sh</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">DATE</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d<span class="si">)</span>
<span class="nb">export </span>JAVA_HOME PATH CLASSPATH
<span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/java/jdk1.8.0_131
<span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/bin:<span class="nv">$JAVA_HOME</span>/jre/bin:<span class="nv">$PATH</span>
<span class="nv">CLASSPATH</span><span class="o">=</span>.:<span class="nv">$JAVA_HOME</span>/lib:<span class="nv">$JAVA_HOME</span>/jre/lib:<span class="nv">$CLASSPATH</span>
<span class="nv">DIR</span><span class="o">=</span>/root/xxx
<span class="nv">JARFILE</span><span class="o">=</span>xxx-0.0.1-SNAPSHOT.jar

<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> <span class="nv">$DIR</span>/backup <span class="o">]</span><span class="p">;</span><span class="k">then
   </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$DIR</span>/backup
<span class="k">fi
</span><span class="nb">cd</span> <span class="nv">$DIR</span>

ps <span class="nt">-ef</span> | <span class="nb">grep</span> <span class="nv">$JARFILE</span> | <span class="nb">grep</span> <span class="nt">-v</span> <span class="nb">grep</span> | <span class="nb">awk</span> <span class="s1">'{print $2}'</span> | xargs <span class="nb">kill</span> <span class="nt">-9</span>
<span class="nb">mv</span> <span class="nv">$JARFILE</span> backup/<span class="nv">$JARFILE$DATE</span>
<span class="nb">mv</span> <span class="nt">-f</span> /root/Jenkins-in/<span class="nv">$JARFILE</span> <span class="nb">.</span>

java <span class="nt">-jar</span> <span class="nv">$JARFILE</span> <span class="o">&gt;</span> out.log &amp;
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> <span class="o">=</span> 0 <span class="o">]</span><span class="p">;</span><span class="k">then
        </span><span class="nb">sleep </span>30
        <span class="nb">tail</span> <span class="nt">-n</span> 50 out.log
<span class="k">fi

</span><span class="nb">cd </span>backup/
<span class="nb">ls</span> <span class="nt">-lt</span>|awk <span class="s1">'NR&gt;5{print $NF}'</span>|xargs <span class="nb">rm</span> <span class="nt">-rf</span>
</code></pre></div></div>

<p>这段脚本的意思，就是 kill 旧项目，删除旧项目，启动新项目，备份老项目。</p>

<p>全文完。</p>

<p>参考：https://blog.csdn.net/LLQ_200/article/details/76921487</p>

:ET