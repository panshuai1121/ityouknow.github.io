I"+4<p>上一篇文章<a href="http://www.ityouknow.com/springcloud/2018/12/12/spring-cloud-gateway-start.html">服务网关 Spring Cloud GateWay 初级篇</a>，介绍了 Spring Cloud Gateway 的相关术语、技术原理，以及如何快速使用 Spring Cloud Gateway。这篇文章我们继续学习 Spring Cloud Gateway 的高级使用方式，比如如何配置服务中心来使用，如何使用熔断、限流等高级功能。</p>

<h2 id="注册中心">注册中心</h2>

<p>上篇主要讲解了网关代理单个服务的使用语法，在实际的工作中，服务的相互调用都是依赖于服务中心提供的入口来使用，服务中心往往注册了很多服务，如果每个服务都需要单独配置的话，这将是一份很枯燥的工作。Spring Cloud Gateway 提供了一种默认转发的能力，只要将 Spring Cloud Gateway 注册到服务中心，Spring Cloud Gateway 默认就会代理服务中心的所有服务，下面用代码演示。</p>

<h3 id="准备服务和注册中心">准备服务和注册中心</h3>

<p>在介绍<a href="http://www.ityouknow.com/springcloud/2017/06/01/gateway-service-zuul.html">服务网关 zuul 的使用</a>时，提供了 spring-cloud-eureka 、spring-cloud-producer 项目示例，本次演示我们将两个项目版本升级到 <code class="highlighter-rouge">Finchley.SR2</code> 后继续演示使用。</p>

<p>spring-cloud-eureka(Eureka Server) 的 pom 文件更改，其它依赖包不变。</p>

<p>升级前：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>升级后：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>spring-cloud-producer(Eureka Client)的 pom 文件更改。因为配置中心需要作为服务注册到注册中心，所以需要升级 Eureka Client，其他依赖没有变动。</p>

<p>升级前：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>升级后：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>两个项目升级完依赖包后依次重启，访问注册中心地址 <code class="highlighter-rouge">http://localhost:8000/</code> 即可看到名为 <code class="highlighter-rouge">SPRING-CLOUD-PRODUCER</code>的服务。</p>

<h3 id="服务网关注册到注册中心">服务网关注册到注册中心</h3>

<p>复制上一节的示例项目 <a href="http://www.ityouknow.com/springcloud/2018/12/12/spring-cloud-gateway-start.html">cloud-gateway</a> 重新命名为 cloud-gateway-eureka，添加 eureka 的客户端依赖包。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre></div></div>

<p>修改 application.yml 配置文件内容如下</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server:
  port: 8888
spring:
  application:
    name: cloud-gateway-eureka
  cloud:
    gateway:
     discovery:
        locator:
         enabled: true
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka/
logging:
  level:
    org.springframework.cloud.gateway: debug
</code></pre></div></div>

<p>配置说明：</p>

<ul>
  <li><code class="highlighter-rouge">spring.cloud.gateway.discovery.locator.enabled</code>：是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 false，设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。</li>
  <li><code class="highlighter-rouge">eureka.client.service-url.defaultZone</code>指定注册中心的地址，以便使用服务发现功能</li>
  <li><code class="highlighter-rouge">logging.level.org.springframework.cloud.gateway</code> 调整相 gateway 包的 log 级别，以便排查问题</li>
</ul>

<p>修改完成后启动 cloud-gateway-eureka 项目，访问注册中心地址 <code class="highlighter-rouge">http://localhost:8000/</code> 即可看到名为 <code class="highlighter-rouge">CLOUD-GATEWAY-EUREKA</code>的服务。</p>

<h3 id="测试">测试</h3>

<p>将 Spring Cloud Gateway 注册到服务中心之后，网关会自动代理所有的在注册中心的服务，访问这些服务的语法为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://网关地址：端口/服务中心注册 serviceId/具体的url
</code></pre></div></div>

<p>比如我们的 spring-cloud-producer 项目有一个 <code class="highlighter-rouge">/hello</code> 的服务，访问此服务的时候会返回：hello world。</p>

<p>比如访问地址：<code class="highlighter-rouge">http://localhost:9000/hello</code>，页面返回：hello world!</p>

<p>按照上面的语法我们通过网关来访问，浏览器输入：<code class="highlighter-rouge">http://localhost:8888/SPRING-CLOUD-PRODUCER/hello</code> 同样返回：hello world!证明服务网关转发成功。</p>

<p>我们将项目 spring-cloud-producer 复制一份为 spring-cloud-producer-1，将<code class="highlighter-rouge">/hello</code>服务的返回值修改为 hello world smile !，修改端口号为 9001 ，修完完成后重启，这时候访问注册中心后台会发现有两个名为 <code class="highlighter-rouge">SPRING-CLOUD-PRODUCER</code>的服务。</p>

<p>在浏览器多次访问地址：<code class="highlighter-rouge">http://localhost:8888/SPRING-CLOUD-PRODUCER/hello</code>，页面交替返回以下信息：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello world!
hello world smile!
</code></pre></div></div>

<p>说明后端服务自动进行了均衡负载。</p>

<h2 id="基于-filter过滤器-实现的高级功能">基于 Filter(过滤器) 实现的高级功能</h2>

<p>在<a href="http://www.ityouknow.com/springcloud/2018/01/20/spring-cloud-zuul.html">服务网关Zuul高级篇</a>中大概介绍过 Filter 的概念。</p>

<p>Spring Cloud Gateway 的 Filter 的生命周期不像 Zuul 的那么丰富，它只有两个：“pre” 和 “post”。</p>

<ul>
  <li><strong>PRE</strong>： 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li>
  <li><strong>POST</strong>：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的 HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li>
</ul>

<p>Spring Cloud Gateway 的 Filter 分为两种：GatewayFilter 与 GlobalFilter。GlobalFilter 会应用到所有的路由上，而 GatewayFilter 将应用到单个路由或者一个分组的路由上。</p>

<p>Spring Cloud Gateway 内置了9种 GlobalFilter，比如 Netty Routing Filter、LoadBalancerClient Filter、Websocket Routing Filter 等，根据名字即可猜测出这些 Filter 的作者，具体大家可以参考官网内容：<a href="http://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html#_global_filters">Global Filters</a></p>

<p>利用 GatewayFilter 可以修改请求的 Http 的请求或者响应，或者根据请求或者响应做一些特殊的限制。
更多时候我们会利用 GatewayFilter 做一些具体的路由配置，下面我们做一些简单的介绍。</p>

<h3 id="快速上手-filter-使用">快速上手 Filter 使用</h3>

<p>我们以 AddRequestParameter GatewayFilter 来演示一下，如何在项目中使用 GatewayFilter，AddRequestParameter GatewayFilter 可以在请求中添加指定参数。</p>

<p><strong>application.yml配置示例</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring:
  cloud:
    gateway:
      routes:
      - id: add_request_parameter_route
        uri: http://example.org
        filters:
        - AddRequestParameter=foo, bar
</code></pre></div></div>

<p>这样就会给匹配的每个请求添加上<code class="highlighter-rouge">foo=bar</code>的参数和值。</p>

<p>我们将以上配置融入到 cloud-gateway-eureka 项目中，完整的 <code class="highlighter-rouge">application.yml</code> 文件配置信息如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server:
  port: 8888
spring:
  application:
    name: cloud-gateway-eureka
  cloud:
    gateway:
     discovery:
        locator:
         enabled: true
     routes:
     - id: add_request_parameter_route
       uri: http://localhost:9000
       filters:
       - AddRequestParameter=foo, bar
       predicates:
         - Method=GET
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8000/eureka/
logging:
  level:
    org.springframework.cloud.gateway: debug
</code></pre></div></div>

<p>这里的 routes 手动指定了服务的转发地址，设置所有的 GET 方法都会自动添加<code class="highlighter-rouge">foo=bar</code>，<code class="highlighter-rouge">http://localhost:9000</code> 是 spring-cloud-producer 项目，我们在此项目中添加一个 foo() 方法，用来接收转发中添加的参数 foo。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RequestMapping("/foo")
public String foo(String foo) {
    return "hello "+foo+"!";
}
</code></pre></div></div>

<p>修改完成后重启 cloud-gateway-eureka、spring-cloud-producer 项目。访问地址<code class="highlighter-rouge">http://localhost:9000/foo</code>页面返回：hello null!，说明并没有接受到参数 foo；通过网关来调用此服务，浏览器访问地址<code class="highlighter-rouge">http://localhost:8888/foo</code>页面返回：hello bar!，说明成功接收到参数 foo 参数的值 bar ,证明网关在转发的过程中已经通过 filter 添加了设置的参数和值。</p>

<h3 id="服务化路由转发">服务化路由转发</h3>

<p>上面我们使用 uri 指定了一个服务转发地址，单个服务这样使用问题不大，但是我们在注册中心往往会使用多个服务来共同支撑整个服务的使用，这个时候我们就期望可以将 Filter 作用到每个应用的实例上，spring cloud gateway 工了这样的功能，只需要简单配置即可。</p>

<p>为了测试两个服务提供者是否都被调用，我们在 spring-cloud-producer-1 项目中也同样添加 foo() 方法。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@RequestMapping("/foo")
public String foo(String foo) {
    return "hello "+foo+"!!";
}
</code></pre></div></div>

<p>为了和 spring-cloud-producer 中 foo() 方法有所区别，这里使用了两个感叹号。同时将 cloud-gateway-eureka 项目配置文件中的 uri 内容修改如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#格式为：lb://应用注册服务名
uri: lb://spring-cloud-producer
</code></pre></div></div>

<p>修改完之后，重新启动项目 cloud-gateway-eureka、spring-cloud-producer-1，浏览器访问地址:<code class="highlighter-rouge">http://localhost:8888/foo</code>页面交替出现：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello bar!
hello bar!!
</code></pre></div></div>

<p>证明请求依据均匀转发到后端服务，并且后端服务均接收到了 filter 增加的参数 foo 值。</p>

<p>这里其实默认使用了全局过滤器 LoadBalancerClient ，当路由配置中 uri 所用的协议为 lb 时（以uri: lb://spring-cloud-producer为例），gateway 将使用 LoadBalancerClient 把 spring-cloud-producer 通过 eureka 解析为实际的主机和端口，并进行负载均衡。</p>

<p>下篇再给大家介绍集中比较常用的 Filter 功能。</p>

<p><strong><a href="https://github.com/ityouknow/spring-cloud-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-cloud-examples">示例代码-码云</a></strong></p>

<h2 id="参考">参考</h2>

<p><a href="https://windmt.com/2018/05/08/spring-cloud-14-spring-cloud-gateway-filter/">Spring Cloud（十四）：Spring Cloud Gateway（过滤器）</a><br />
<a href="https://www.jianshu.com/p/5e40bbc95eb9">spring cloud gateway 2 深入了解 - filter</a></p>
:ET