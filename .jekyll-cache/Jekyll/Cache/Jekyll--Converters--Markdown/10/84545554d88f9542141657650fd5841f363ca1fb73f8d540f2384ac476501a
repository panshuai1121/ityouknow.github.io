I"h+<p>Python 是一门脚本语言。</p>

<p>脚本语言是一种介乎于 HTML 和诸如 JAVA 、 Visual Basic 、 C++ 等编程语言之间的一种特殊的语言，尽管它更接近后者，但它却不具有编程语言复杂、严谨的语法和规则。 有一些脚本语言已经发生了变化，如 Python，perl 已经可以编译成中间代码然后执行，这样的脚本语言已经可以被称为编译型脚本语言。</p>

<!--more-->

<p>脚本语言的“优势”，其实只在于它不需要事先“编译”。所以 Python 语言不用像 Java 或者 C++ 语言需要首先进行编译，再进行运行，脚本语言可以直接读取文本文件，一边解释一边执行。</p>

<p>Python 是一门独特的脚本语言，快速浏览一下他的要点：</p>

<ul>
  <li><strong>面向对象</strong>：每一个变量都是一个类，有其自己的<strong>属性（attribute）</strong>与<strong>方法（method）</strong>。</li>
  <li><strong>语法块</strong>：用缩进（四个空格）而不是分号、花括号等符号来标记。因此，行首的空格不能随意书写。</li>
  <li><strong>注释</strong>：行内用“#”号，行间注释写在两组连续三单引号之间：’’’</li>
  <li><strong>续行</strong>：行尾输入一个反斜杠加一个空格（’\ ‘），再换行。如果行尾语法明显未完成（比如以逗号结尾），可以直接续行。</li>
  <li><strong>打印与输入</strong>： 函数 print() 与 input()，注意 print() 的 sep 与 end 参数。</li>
  <li><strong>变量</strong>：无需指定变量类型，也不需要提前声明变量。</li>
  <li>删除变量：del()</li>
  <li>复制变量：直接将变量a赋值给b，有时仅仅复制了一个“引用”。此后 b 与 a 的改动仍会互相影响。必要时使用 <code class="highlighter-rouge">a is b</code> 来判断是否同址。</li>
  <li><strong>模块</strong>：通过 <code class="highlighter-rouge">import pandas</code> 的方式加载模块（或者 <code class="highlighter-rouge">import pandas as pd</code>），并用形如 <code class="highlighter-rouge">pandas.DataFrame</code>（或 <code class="highlighter-rouge">pd.DataFrame</code>）的方式调用模块内的方法。也可以使用 <code class="highlighter-rouge">from pandas import DataFrame</code> 的方式，这样在下文可以直接使用 <code class="highlighter-rouge">DataFrame</code> 作为调用名。</li>
  <li><strong>帮助</strong>：配合使用 dir() 与 help() 命令；其中前者是输出变量所有的成员。</li>
</ul>

<h2 id="python-标识符">Python 标识符</h2>

<p>标识符是电脑语言中允许作为名字的有效字符串集合。其中，有一部分是关键字，构成语言的标识符。这样的标识符是不能做它用的标识符的，否则会引起语法错误（SyntaxError 异常）。</p>

<p>合法的 Python 标识符，需要遵守如下规定：</p>

<ul>
  <li>第一个字符必须是字母或下划线（_）</li>
  <li>剩下的字符可以是字母和数字或下划线</li>
  <li>大小写敏感</li>
  <li>不能是 Python 的关键字，例如 def、class 就不能作为标识符</li>
</ul>

<p>以下划线开头的标识符是有特殊意义的。以单下划线开头 <code class="highlighter-rouge">_foo</code> 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 <code class="highlighter-rouge">from xxx import *</code> 而导入。</p>

<p>以双下划线开头的 <code class="highlighter-rouge">__foo</code> 代表类的私有成员，以双下划线开头和结尾的 <code class="highlighter-rouge">__foo__</code> 代表 Python 里特殊方法专用的标识，如 <code class="highlighter-rouge">__init__()</code> 代表类的构造函数。</p>

<p>Python 可以同一行显示多条语句，方法是用分号 ; 分开，如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; print("hello");print("world");
hello
world
</code></pre></div></div>

<h2 id="python-关键字">Python 关键字</h2>

<p>下面的列表显示了在 Python 中的保留字。这些保留字不能用作常数或变数，或任何其他标识符名称。</p>

<p>所有Python的关键字只包含小写字母。</p>

<table>
  <thead>
    <tr>
      <th>and</th>
      <th>exec</th>
      <th>not</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>assert</td>
      <td>finally</td>
      <td>or</td>
    </tr>
    <tr>
      <td>break</td>
      <td>for</td>
      <td>pass</td>
    </tr>
    <tr>
      <td>class</td>
      <td>from</td>
      <td>print</td>
    </tr>
    <tr>
      <td>continue</td>
      <td>global</td>
      <td>raise</td>
    </tr>
    <tr>
      <td>def</td>
      <td>if</td>
      <td>return</td>
    </tr>
    <tr>
      <td>del</td>
      <td>import</td>
      <td>try</td>
    </tr>
    <tr>
      <td>elif</td>
      <td>in</td>
      <td>while</td>
    </tr>
    <tr>
      <td>else</td>
      <td>is</td>
      <td>with</td>
    </tr>
    <tr>
      <td>except</td>
      <td>lambda</td>
      <td>yield</td>
    </tr>
  </tbody>
</table>

<h2 id="缩进">缩进</h2>

<p>任何一种编程语言都有各自的语法和编程规范，Python 之所以以‘优雅，简单’著称，其中一个最重要的原因，就是它的“缩进”。
大部分的编程语言都是使用“{}”来表示一个语句块或者代码段，而 Python 用缩进层次来组织代码块，而约定一个缩进是用‘4个空格’来表示，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。</p>

<p>如果是用文本编辑器或者 IDE，可以把 Tab 自动转换为4个空格，然后用 tab 键来使用缩进，确保不混用 Tab 和空格。</p>

<p>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。如下所示：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if True:
    print("neo")
else:
    print("smile")
</code></pre></div></div>

<p>以下代码将会执行错误：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if True:
    print("neo")
else:
    print("smile")
   print("it")  
</code></pre></div></div>

<p>因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</p>

<h2 id="多行语句">多行语句</h2>

<p>Python 语句中一般以新行作为为语句的结束符。</p>

<p>但是我们可以使用斜杠（ \）将一行的语句分为多行显示，如下所示：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>total = item_one + \
        item_two + \
        item_three
</code></pre></div></div>

<p>语句中包含[], {} 或 () 括号就不需要使用多行连接符。如下实例：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>days = ['Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday']
</code></pre></div></div>

<h2 id="python-引号">Python 引号</h2>

<p>Python 接收单引号(‘ )，双引号(“ )，三引号(‘’’ “””) 来表示字符串，引号的开始与结束必须相同类型的。</p>

<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用文档字符串，在文件的特定地点，被当做注释。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>word = 'word'
sentence = "This is a sentence."
paragraph = """This is a paragraph. It is
made up of multiple lines and sentences."""
</code></pre></div></div>

<h2 id="python-注释">Python 注释</h2>

<p>以‘#’开头的语句是注释，不一定要出现在行首，在某些语句后面也可以加注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释，但注意不要使用无意义的注释。</p>

<p>Python 中单行注释采用 # 开头，Python 没有块注释，所以现在推荐的多行注释也是采用的 # 比如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python
</span>
<span class="c1"># First comment
</span><span class="k">print</span><span class="p">(</span><span class="s">"Hello, Python!"</span><span class="p">);</span>  <span class="c1"># second comment
</span></code></pre></div></div>

<p>输出结果：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, Python!
</code></pre></div></div>

<p>注释可以在语句或表达式行末：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name = "Madisetti" # This is again comment`
</code></pre></div></div>

<p>多条评论：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This is a comment.
# This is a comment, too.
# This is a comment, too.
# I said that already.
</code></pre></div></div>

<h2 id="python-空格和空行">Python 空格和空行</h2>

<p>在 Python 中，为了让代码看起来更清晰，具有更好的可读性，有时会在代码中太内疚空格和空行。空格或者空行与代码缩进不同，并不是 Python 语法的一部分。</p>

<p>书写时不插入空格或者空行，Python 解释器运行也不会出错。但是空格或者空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>

<blockquote>
  <p>空格和空行是为了增加代码可读性。</p>
</blockquote>

<p>比如在变量复制时添加空格。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello = "world"
</code></pre></div></div>

<p>比如类成员函数之间空一行，模块级函数和类定义之间空两行；</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class A:
 
    def __init__(self):
        pass
         
    def hello(self):
        pass
         
         
def main():
    pass
</code></pre></div></div>

<h2 id="print-输出">Print 输出</h2>

<p>print() 默认输出是换行的，如果要实现不换行需要加上end参数。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x="a"
y="b"
print(x, end=' ')
print(y, end=' ')
</code></pre></div></div>

<p>文中示例代码：<a href="https://github.com/JustDoPython/python-100-day">python-100-days</a></p>

<h2 id="总结">总结</h2>

<p>这篇文章学习了 Python 的相关语法特点，了解到 Python 是一个简洁的脚本语言，使用缩进、空格、换行等规定语法一方面可以保障程序运行正常，也增加了程序本身的阅读性。</p>

<blockquote>
  <p>示例代码：<a href="https://github.com/JustDoPython/python-100-day/tree/master/day-002">Python-100-days-day002</a></p>
</blockquote>

<p>参考：</p>

<p>https://www.xjimmy.com/python-4-code.html<br />
https://wizardforcel.gitbooks.io/w3school-python/content/3.html</p>
:ET