I"yn<p>by 極光</p>

<p>MongoDB 是一款面向文档型的 <code class="highlighter-rouge">NoSQL</code> 数据库，是一个基于分布式文件存储的开源的非关系型数据库系统，其内容是以 <code class="highlighter-rouge">K/V</code> 形式存储，结构不固定，它的字段值可以包含其他文档、数组和文档数组等。其采用的 <code class="highlighter-rouge">BSON</code>（二进制 JSON ）的数据结构，可以提高存储和扫描效率，但空间开销会有些大。今天就为大家简单介绍下在 Python 中使用 MongoDB 。</p>

<!--more-->

<h2 id="安装-pymongo-库">安装 PyMongo 库</h2>

<p>在 Python 中操作 MongoDB ，需要使用 <code class="highlighter-rouge">PyMongo</code> 库，执行如下命令安装：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip3 <span class="nb">install </span>pymongo
</code></pre></div></div>

<h2 id="连接-mongodb-数据库">连接 MongoDB 数据库</h2>

<p>连接时需要使用 PyMongo 库里面的 MongoClient 模块，有两种方式可以创建连接，默认只需要传入IP和端口号即可。如果数据库存在账号密码，则需要指定连接的数据库，并进行鉴权才能连接成功。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#导入 MongoClient 模块
</span><span class="kn">from</span> <span class="nn">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span><span class="p">,</span> <span class="n">ASCENDING</span><span class="p">,</span> <span class="n">DESCENDING</span>

<span class="c1"># 两种方式
#1. 传入数据库IP和端口号
</span><span class="n">mc</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="s">'127.0.0.1'</span><span class="p">,</span> <span class="mi">27017</span><span class="p">)</span>

<span class="c1">#2. 直接传入连接字串
</span><span class="n">mc</span> <span class="o">=</span> <span class="n">MongoClient</span><span class="p">(</span><span class="s">'mongodb://127.0.0.1:27017'</span><span class="p">)</span>

<span class="c1"># 有密码的连接
# 首先指定连接testdb数据库
</span><span class="n">db</span> <span class="o">=</span> <span class="n">mc</span><span class="p">.</span><span class="n">testdb</span>

<span class="c1"># 通过authenticate方法认证账号密码
</span><span class="n">db</span><span class="p">.</span><span class="n">authenticate</span><span class="p">(</span><span class="s">'username'</span><span class="p">,</span><span class="s">'password'</span><span class="p">)</span>

<span class="c1"># 检查是否连接成功，输出以下结果表示连接成功
</span><span class="k">print</span><span class="p">(</span><span class="n">mc</span><span class="p">.</span><span class="n">server_info</span><span class="p">())</span>
<span class="c1"># {'version': '4.2.1', 'gitVersion': 'edf6d45851c0b9ee15548f0f847df141764a317e', 'modules': [], 'allocator': 'tcmalloc', 'javascriptEngine': 'mozjs', 'sysInfo': 'deprecated', 'versionArray': [4, 2, 1, 0], 'openssl': {'running': 'OpenSSL 1.1.1  11 Sep 2018', 'compiled': 'OpenSSL 1.1.1  11 Sep 2018'},  ……省略 ,  'ok': 1.0}
</span></code></pre></div></div>

<h2 id="mongodb-数据库操作">MongoDB 数据库操作</h2>

<p>成功连接数据库，接下来我们开始介绍通过 MongoClient 模块如何对 mongoDB 数据库进行 <code class="highlighter-rouge">CURD</code> 的操作。</p>

<h3 id="获取数据库和集合">获取数据库和集合</h3>

<p>首先要指定需要操作的数据库和集合，这里的数据库可以对应为 <code class="highlighter-rouge">Mysql</code> 的 <code class="highlighter-rouge">DataBase</code>，集合对应为 <code class="highlighter-rouge">Mysql</code> 的 <code class="highlighter-rouge">Table</code>。需要注意的是在 mongoDB 中，不需要提前创建数据库和集合，在你操作它们时如果没有则会自动创建，但都是延时创建的，在添加 <code class="highlighter-rouge">Document</code> 时才会真正创建。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 指定操作数据库的两种方式
#1. 获取 testdb 数据库，没有则自动创建
</span><span class="n">db</span> <span class="o">=</span> <span class="n">mc</span><span class="p">.</span><span class="n">testdb</span>

<span class="c1">#2. 效果与上面 db = mc.testdb 相同
</span><span class="n">db</span> <span class="o">=</span> <span class="n">mc</span><span class="p">[</span><span class="s">'testdb'</span><span class="p">]</span>

<span class="c1"># 打印出testdb数据库下所有集合(表)
</span><span class="k">print</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">collection_names</span><span class="p">())</span>


<span class="c1"># 指定操作集合的两种方式
#1. 获取 test 集合，没有则自动创建
</span><span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">test</span>

<span class="c1">#2. 效果与 collection = db.test 相同
</span><span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="s">'test'</span><span class="p">]</span>

<span class="c1"># 打印集合中一行数据
</span><span class="k">print</span><span class="p">(</span><span class="n">collection</span><span class="p">.</span><span class="n">find_one</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="数据的插入操作">数据的插入操作</h3>

<p>在 MongoDB 中，每条数据其实都有一个 <code class="highlighter-rouge">_id</code> 属性作为唯一标识。如果没有显式指明该属性，MongoDB 会自动产生一个 <code class="highlighter-rouge">ObjectId</code> 类型的 <code class="highlighter-rouge">_id</code> 属性，<code class="highlighter-rouge">insert()</code> 方法会在执行后返回 <code class="highlighter-rouge">_id</code> 值。不过在 PyMongo 3.x 版本中，官方已经不推荐使用 <code class="highlighter-rouge">insert()</code> 方法，而是推荐使用<code class="highlighter-rouge">insert_one()</code> 和 <code class="highlighter-rouge">insert_many()</code> 方法来分别插入单条记录和多条记录。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 要插入到集合中的对象
</span><span class="n">book</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'name'</span> <span class="p">:</span> <span class="s">'Python基础'</span><span class="p">,</span>
      <span class="s">'author'</span> <span class="p">:</span> <span class="s">'张三'</span><span class="p">,</span>
      <span class="s">'page'</span> <span class="p">:</span> <span class="mi">80</span>
<span class="p">}</span>

<span class="c1"># 向集合中插入一条记录
</span><span class="n">collection</span><span class="p">.</span><span class="n">insert_one</span><span class="p">(</span><span class="n">book</span><span class="p">)</span>
<span class="c1"># 返回结果：{'_id': ObjectId('5de4c7b90ae08431839ac2a7'), 'name': 'Python基础', 'author': '张三', 'page': 80}
</span>
<span class="c1"># 对于insert_many()方法，我们可以将数据以列表形式传递参数
</span><span class="n">book1</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'name'</span> <span class="p">:</span> <span class="s">'Java基础'</span><span class="p">,</span>
      <span class="s">'author'</span> <span class="p">:</span> <span class="s">'李白'</span><span class="p">,</span>
      <span class="s">'page'</span> <span class="p">:</span> <span class="mi">100</span>
<span class="p">}</span>
<span class="n">book2</span> <span class="o">=</span> <span class="p">{</span>
      <span class="s">'name'</span> <span class="p">:</span> <span class="s">'Java虚拟机'</span><span class="p">,</span>
      <span class="s">'author'</span> <span class="p">:</span> <span class="s">'王五'</span><span class="p">,</span>
      <span class="s">'page'</span> <span class="p">:</span> <span class="mi">100</span>
<span class="p">}</span>

<span class="c1"># 创建 book_list 列表
</span><span class="n">book_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">book1</span><span class="p">,</span> <span class="n">book2</span><span class="p">]</span>

<span class="c1"># 向集合中插入多条记录
</span><span class="n">collection</span><span class="p">.</span><span class="n">insert_many</span><span class="p">(</span><span class="n">book_list</span><span class="p">)</span>
<span class="c1"># 返回结果： &lt;pymongo.results.InsertManyResult object at 0x7f80a39fa408&gt;
</span></code></pre></div></div>

<h3 id="数据的查询操作">数据的查询操作</h3>

<p>查询需要使用 <code class="highlighter-rouge">find_one()</code> 或 <code class="highlighter-rouge">find()</code> 方法，其中 <code class="highlighter-rouge">find_one()</code> 查询得到的是单个结果，即一条记录，<code class="highlighter-rouge">find()</code> 则返回一个生成器对象。下面我们就来查询上面刚插入的数据，如果查询不到数据则返回 <code class="highlighter-rouge">None</code> ，代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 通过条件查询一条记录，如果不存在则返回None
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find_one</span><span class="p">({</span><span class="s">'author'</span><span class="p">:</span> <span class="s">'张三'</span><span class="p">})</span>
<span class="k">print</span> <span class="p">(</span><span class="n">res</span><span class="p">)</span>
<span class="c1"># 打印结果：{'_id': ObjectId('5de4c7b90ae08431839ac2a7'), 'name': 'Python基础', 'author': '张三', 'page': 80}
</span>
<span class="c1"># 通过条件查询多条记录，如果不存在则返回None
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">({</span><span class="s">'page'</span><span class="p">:</span> <span class="mi">100</span><span class="p">})</span>
<span class="k">print</span> <span class="p">(</span><span class="n">res</span><span class="p">)</span>
<span class="c1">#打印结果：&lt;pymongo.cursor.Cursor object at 0x7f80a39daa58&gt;
</span>
<span class="c1"># 使用 find() 查询会返回一个对象
# 遍历对象，并打印查询结果
</span><span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
   <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="c1">#打印结果：
# {'_id': ObjectId('5de4c8ae0ae08431839ac2a8'), 'name': 'Java基础', 'author': '李白', 'page': 100}
# {'_id': ObjectId('5de4c8ae0ae08431839ac2a9'), 'name': 'Java虚拟机', 'author': '王五', 'page': 100}
</span>
<span class="c1"># 查询page大于50的记录
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">({</span><span class="s">'page'</span><span class="p">:</span> <span class="p">{</span><span class="s">'$gt'</span><span class="p">:</span> <span class="mi">50</span><span class="p">}})</span>
<span class="c1"># 通过遍历返回对象，结果如下：
# {'_id': ObjectId('5de4c7b90ae08431839ac2a7'), 'name': 'Python基础', 'author': '张三', 'page': 80}
# {'_id': ObjectId('5de4c8ae0ae08431839ac2a8'), 'name': 'Java基础', 'author': '李白', 'page': 100}
# {'_id': ObjectId('5de4c8ae0ae08431839ac2a9'), 'name': 'Java虚拟机', 'author': '王五', 'page': 100}
</span></code></pre></div></div>

<p>上面查询条件中我们用到了 <code class="highlighter-rouge">$gt</code> 的比较运算符，关于查询条件中的比较运算符和功能运算符对照表如下：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">符号</th>
      <th style="text-align: center">含义</th>
      <th style="text-align: left">举例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">$gt</td>
      <td style="text-align: center">大于</td>
      <td style="text-align: left">{‘page’: {‘$gt’: 50}</td>
    </tr>
    <tr>
      <td style="text-align: center">$lt</td>
      <td style="text-align: center">小于</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: center">$lte</td>
      <td style="text-align: center">小于等于</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: center">$gte</td>
      <td style="text-align: center">大于等于</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: center">$ne</td>
      <td style="text-align: center">不等于</td>
      <td style="text-align: left"> </td>
    </tr>
    <tr>
      <td style="text-align: center">$in</td>
      <td style="text-align: center">在范围内</td>
      <td style="text-align: left">{‘page’: {‘$in’: [50, 100]}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$nin</td>
      <td style="text-align: center">不在范围内</td>
      <td style="text-align: left">{‘page’: {‘$nin’: [50, 100]}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$regex</td>
      <td style="text-align: center">匹配正则表达式</td>
      <td style="text-align: left">{‘name’: {‘$regex’: ‘^张.*’}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$exists</td>
      <td style="text-align: center">属性是否存在</td>
      <td style="text-align: left">{‘name’: {‘$exists’: True}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$type</td>
      <td style="text-align: center">类型判断</td>
      <td style="text-align: left">{‘name’: {‘$type’: ‘string’}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$mod</td>
      <td style="text-align: center">数字模操作</td>
      <td style="text-align: left">{‘page’: {‘$mod’: [80, 10]}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$text</td>
      <td style="text-align: center">文本查询</td>
      <td style="text-align: left">{‘$text’: {‘$search’: ‘Java’}}</td>
    </tr>
    <tr>
      <td style="text-align: center">$where</td>
      <td style="text-align: center">高级条件查询</td>
      <td style="text-align: left">{‘$where’: ‘obj. author == obj. full_name’}</td>
    </tr>
  </tbody>
</table>

<h3 id="数据的更新操作">数据的更新操作</h3>

<p>更新操作和插入操作类似，<code class="highlighter-rouge">PyMongo</code> 提供了两种更新方法，即 <code class="highlighter-rouge">update_one()</code> 和 <code class="highlighter-rouge">update_many()</code> 方法，其中 <code class="highlighter-rouge">update_one()</code> 方法只会更新满足条件的第一条记录。</p>

<blockquote>
  <p>注意：</p>
  <ul>
    <li>如果使用 $set，则只更新 book 对象内存在的字段，如果更新前还有其他字段，则不更新也不删除。</li>
    <li>如果不使用 $set，则会把更新前的数据全部用 book 对象替换，如果原本存在其他字段则会被删除。</li>
  </ul>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 查询一条记录
</span><span class="n">book</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find_one</span><span class="p">({</span><span class="s">'author'</span><span class="p">:</span> <span class="s">'张三'</span><span class="p">})</span>
<span class="n">book</span><span class="p">[</span><span class="s">'page'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">90</span>

<span class="c1"># 更新满足条件{'author', '张三'}的第一条记录
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">update_one</span><span class="p">({</span><span class="s">'author'</span><span class="p">:</span> <span class="s">'张三'</span><span class="p">},</span> <span class="p">{</span><span class="s">'$set'</span><span class="p">:</span> <span class="n">book</span><span class="p">})</span>

<span class="c1"># 更新返回结果是一个对象，我们可以调用matched_count和modified_count属性分别获得匹配的数据条数和影响的数据条数。
</span><span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">matched_count</span><span class="p">,</span> <span class="n">res</span><span class="p">.</span><span class="n">modified_count</span><span class="p">)</span>
<span class="c1">#打印结果：1 1
</span>
<span class="c1"># 更新满足条件 page&gt;90 的所有记录，page 字段自加 10
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">update_many</span><span class="p">({</span><span class="s">'page'</span><span class="p">:</span> <span class="p">{</span><span class="s">'$gt'</span><span class="p">:</span> <span class="mi">90</span><span class="p">}},</span> <span class="p">{</span><span class="s">'$inc'</span><span class="p">:</span> <span class="p">{</span><span class="s">'page'</span><span class="p">:</span> <span class="mi">10</span><span class="p">}})</span>

<span class="c1"># 打印更新匹配和影响的记录数
</span><span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">matched_count</span><span class="p">,</span> <span class="n">res</span><span class="p">.</span><span class="n">modified_count</span><span class="p">)</span>
<span class="c1">#打印结果：2 2
</span>
<span class="n">book3</span> <span class="o">=</span> <span class="p">{</span><span class="s">'name'</span><span class="p">:</span><span class="s">'Python高级'</span><span class="p">,</span> <span class="s">'author'</span><span class="p">:</span><span class="s">'赵飞'</span><span class="p">,</span> <span class="s">'page'</span><span class="p">:</span> <span class="mi">50</span><span class="p">}</span>

<span class="c1">#upsert=True表示如果没有满足更新条件的记录，则会将book3插入集合中
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">update_one</span><span class="p">({</span><span class="s">'author'</span><span class="p">:</span> <span class="s">'赵飞'</span><span class="p">},</span> <span class="p">{</span><span class="s">'$set'</span><span class="p">:</span> <span class="n">book3</span><span class="p">},</span> <span class="n">upsert</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">matched_count</span><span class="p">,</span> <span class="n">res</span><span class="p">.</span><span class="n">modified_count</span><span class="p">)</span>
<span class="c1">#打印结果：0 0
</span>
<span class="c1"># 查询所有记录，并遍历打印出来
</span><span class="n">res</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">()</span>
<span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
   <span class="k">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="c1">#打印结果：
# {'_id': ObjectId('5de4c7b90ae08431839ac2a7'), 'name': 'Python基础', 'author': '张三', 'page': 90}
# {'_id': ObjectId('5de4c8ae0ae08431839ac2a8'), 'name': 'Java基础', 'author': '李白', 'page': 110}
# {'_id': ObjectId('5de4c8ae0ae08431839ac2a9'), 'name': 'Java虚拟机', 'author': '王五', 'page': 110}
# {'_id': ObjectId('5de4d76f71aa089d58170a92'), 'author': '赵飞', 'name': 'Python高级', 'page': 50}
</span></code></pre></div></div>

<h3 id="集合的删除操作">集合的删除操作</h3>

<p>删除数据同样推荐使用两个方法 <code class="highlighter-rouge">delete_one()</code> 和 <code class="highlighter-rouge">delete_many()</code> ，其中 <code class="highlighter-rouge">delete_one()</code> 为删除第一条符合条件的记录。具体操作代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 删除满足条件的第一条记录
</span><span class="n">result</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">delete_one</span><span class="p">({</span><span class="s">'author'</span><span class="p">:</span> <span class="s">'张三'</span><span class="p">})</span>
<span class="c1"># 同样可以通过返回对象的 deleted_count 属性查询删除的记录数
</span><span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">deleted_count</span><span class="p">)</span>
<span class="c1"># 打印结果：1
</span>
<span class="c1"># 删除满足条件的所有记录，以下为删除 page &lt; 90 的记录
</span><span class="n">result</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">delete_many</span><span class="p">({</span><span class="s">'page'</span><span class="p">:</span> <span class="p">{</span><span class="s">'$lt'</span><span class="p">:</span> <span class="mi">90</span><span class="p">}})</span>
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">deleted_count</span><span class="p">)</span>
<span class="c1"># 打印结果：1
</span></code></pre></div></div>

<h3 id="其他数据库操作">其他数据库操作</h3>

<p>除了以上标准的数据库操作外，<code class="highlighter-rouge">PyMongo</code> 还提供了以下通用且方便的操作方法，比如 <code class="highlighter-rouge">limit()</code> 方法用来读取指定数量的数据
 <code class="highlighter-rouge">skip()</code> 方法用来跳过指定数量的数据等，具体请看如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 查询返回满足条件的记录然后删除
</span><span class="n">result</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find_one_and_delete</span><span class="p">({</span><span class="s">'author'</span><span class="p">:</span> <span class="s">'王五'</span><span class="p">})</span>  
<span class="k">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="c1"># 打印结果：{'_id': ObjectId('5de4c8ae0ae08431839ac2a9'), 'name': 'Java虚拟机', 'author': '王五', 'page': 110}
</span>
<span class="c1"># 统计查询结果个数
# 全部结果个数
</span><span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">().</span><span class="n">count</span><span class="p">()</span>
<span class="c1"># 返回结果：1
</span>
<span class="c1"># 满足条件结果个数
</span><span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">({</span><span class="s">'page'</span><span class="p">:</span> <span class="mi">100</span><span class="p">}).</span><span class="n">count</span><span class="p">()</span>
<span class="c1"># 返回结果：0
</span>
<span class="c1"># 查询结果按字段排序
# 升序
</span><span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">().</span><span class="n">sort</span><span class="p">(</span><span class="s">'page'</span><span class="p">,</span> <span class="n">ASCENDING</span><span class="p">)</span>

<span class="c1"># 降序
</span><span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">().</span><span class="n">sort</span><span class="p">(</span><span class="s">'page'</span><span class="p">,</span> <span class="n">DESCENDING</span><span class="p">)</span>

<span class="c1"># 下面查询结果是按page升序排序，只返回第二条记录及以后的两条结果
</span><span class="n">results</span> <span class="o">=</span> <span class="n">collection</span><span class="p">.</span><span class="n">find</span><span class="p">().</span><span class="n">sort</span><span class="p">(</span><span class="s">'page'</span><span class="p">,</span> <span class="n">ASCENDING</span><span class="p">).</span><span class="n">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">limit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>注意：在数据量在在千万、亿级别庞大的时候，查询时最好 <code class="highlighter-rouge">skip()</code> 的值不要太大，这样很可能导致内存溢出。</p>
</blockquote>

<h3 id="数据索引操作">数据索引操作</h3>

<p>默认情况下，数据插入时已经有一个 <code class="highlighter-rouge">_id</code> 索引了，当然我们还可以创建自定义索引。</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># unique=True时，创建一个唯一索引，索引字段插入相同值时会自动报错，默认为False
</span><span class="n">collection</span><span class="p">.</span><span class="n">create_index</span><span class="p">(</span><span class="s">'page'</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="c1"># 打印结果：'page_1'
</span>
<span class="c1"># 打印出已创建的索引
</span><span class="k">print</span><span class="p">(</span><span class="n">collection</span><span class="p">.</span><span class="n">index_information</span><span class="p">())</span>
<span class="c1"># 返回结果：{'_id_': {'v': 2, 'key': [('_id', 1)], 'ns': 'testdb.test'}, 'page_1': {'v': 2, 'unique': True, 'key': [('page', 1)], 'ns': 'testdb.test'}}
</span>
<span class="c1"># 删除索引
</span><span class="n">collection</span><span class="p">.</span><span class="n">drop_index</span><span class="p">(</span><span class="s">'page_1'</span><span class="p">)</span>

<span class="c1">#删除集合
</span><span class="n">collection</span><span class="p">.</span><span class="n">drop</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>本文为大家介绍了 Python 中如何创建连接 MongoDB 数据库，并通过代码的方式展示了对 MongoDB 数据的增删改查以及排序索引等操作，通过以上学习个人感觉操作起来还是比较简单方便的。今天就先介绍到这里，以后还会为大家介绍其他数据库的操作。</p>

<h2 id="参考">参考</h2>

<p>PyMongo 文档：https://pymongo.readthedocs.io/en/stable/</p>

<blockquote>
  <p>示例代码：https://github.com/JustDoPython/python-100-day</p>
</blockquote>
:ET