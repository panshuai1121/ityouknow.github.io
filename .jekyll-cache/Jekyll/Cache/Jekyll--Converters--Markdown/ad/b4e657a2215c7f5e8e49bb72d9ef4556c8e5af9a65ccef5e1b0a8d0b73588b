I"tX<p>by 潮汐</p>

<p>今天的文章和大家聊聊 Python Numpy 位运算和算术函数，本文将分两部分做详细描述。
<!--more--></p>

<h2 id="numpy-位运算">Numpy 位运算</h2>

<p>NumPy包中，可用位操作函数进行位运算,以 <code class="highlighter-rouge">bitwise_</code> 开头的函数是位运算函数。</p>

<p>NumPy 位运算函数如下：</p>

<table>
  <thead>
    <tr>
      <th>函数</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>bitwise_and</td>
      <td>对数组元素执行位与运算</td>
    </tr>
    <tr>
      <td>bitwise_or</td>
      <td>对数组元素执行位或运算</td>
    </tr>
    <tr>
      <td>invert</td>
      <td>按位取反（位非运算）</td>
    </tr>
    <tr>
      <td>left_shift</td>
      <td>向左移动二进制表示的位（左移位）</td>
    </tr>
    <tr>
      <td>right_shift</td>
      <td>向右移动二进制表示的位（右移位）</td>
    </tr>
  </tbody>
</table>

<table>
  <tbody>
    <tr>
      <td><strong>值得注意的是：</strong> 位运算同样可以使用操作符进行计算，分别是使用 “&amp;”、 “~”、 “</td>
      <td>” 和 “^” 等。</td>
    </tr>
  </tbody>
</table>

<h3 id="1bitwise_and">1、bitwise_and</h3>

<p>bitwise_and() 函数对数组中整数的二进制形式执行位与运算。</p>

<p><strong>实例：</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">17</span>
<span class="k">print</span><span class="p">(</span><span class="s">'13 和 17 的二进制：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bin</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">bin</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'13 和 17 的位与：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">bitwise_and</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">))</span>

</code></pre></div></div>
<p><strong>输出结果：</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>13 和 17 的二进制：
0b1101 0b10001


13 和 17 的位与：
1
</code></pre></div></div>
<p><strong>位与运算规律如下：</strong></p>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th>AND</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>13 和 17 的位与运算规律运算如下：</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
      <th>1</th>
      <th>1</th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td> </td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>AND</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<p>所以 13 和 17 位与运算结果为 1</p>

<h3 id="2bitwise_or">2、bitwise_or</h3>
<p>bitwise_or()函数对数组中整数的二进制形式执行位或运算。</p>

<p><strong>实例：</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

# Numpy 位或运算
a, b = 13, 17
print('13 和 17 的二进制：')
print(bin(a), bin(b))
print('\n')


print('13 和 17 的位或：')
print(np.bitwise_or(a,b))
</code></pre></div></div>
<p><strong>输出结果为：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>13 和 17 的二进制形式：
0b1101 0b10001
13 和 17 的位或：
29
</code></pre></div></div>

<p>位或运算规律如下：</p>

<table>
  <thead>
    <tr>
      <th>A</th>
      <th>B</th>
      <th>OR</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>运算结果为：</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th> </th>
      <th>1</th>
      <th>1</th>
      <th>0</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>OR</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td> </td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td> </td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<p>最后的运算结果为：
<code class="highlighter-rouge">29</code>, 即数字 29 的二进制为 <code class="highlighter-rouge">11101</code>，正是以上实例或运算结果。</p>

<h3 id="3invert">3、invert</h3>

<p>invert() 函数是对数值进行位非操作，位非即数值的取反操作。
invert() 函数对数组中整数进行位取反运算，即 0 变成 1，1 变成 0。</p>

<p>对于有符号整数，取该数二进制数的补码，然后 +1；二进制数最高位为0表示正数，最高位为 1 表示负数。</p>

<p><strong>实例：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

# 比较 13 和 242 的二进制表示，发现了位的反转
print('13 的二进制表示：')
print(np.binary_repr(13, width=8))
print('\n')

print('242 的二进制表示：')
print(np.binary_repr(242, width=8))

print('13 的位反转：')
print(np.invert(np.array([13], dtype=np.uint8)))
print('\n')
</code></pre></div></div>

<p><strong>输出结果为：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>13 的二进制表示：
00001101

242 的二进制表示：
11110010

13 的位反转：
[242]
</code></pre></div></div>

<h3 id="4left_shift">4、left_shift</h3>

<p>left_shift() 函数将数组元素的二进制形式向左移动到指定位置，右侧附加相等数量的 0。</p>

<p>实例：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

print('将 10 左移两位：')
print(np.left_shift(10, 2))
print('\n')

print('10 的二进制表示：')
print(np.binary_repr(10, width=8))
print('\n')

print('40 的二进制表示：')
print(np.binary_repr(40, width=8))
#  '00001010' 中的两位移动到了左边，并在右边添加了两个 0。
</code></pre></div></div>

<p>输出结果为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>将 10 左移两位：
40

10 的二进制表示：
00001010

40 的二进制表示：
00101000
</code></pre></div></div>

<h3 id="5right_shift">5、right_shift</h3>

<p>right_shift() 函数将数组元素的二进制形式向右移动到指定位置，左侧附加相等数量的 0。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

print('将 40 右移两位：')
print(np.right_shift(40, 2))
print('\n')

print('40 的二进制表示：')
print(np.binary_repr(40, width=8))
print('\n')

print('10 的二进制表示：')
print(np.binary_repr(10, width=8))
#  '00001010' 中的两位移动到了右边，并在左边添加了两个 0。
</code></pre></div></div>

<p>输出结果为：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>将 40 右移两位：
10


40 的二进制表示：
00101000


10 的二进制表示：
00001010
</code></pre></div></div>

<h2 id="numpy-算术函数">Numpy 算术函数</h2>

<h3 id="1介绍及函数明细">1、介绍及函数明细</h3>

<p>Numpy 算术函数–&gt;算术函数顾名思义就是加、减、乘、除的意思，即add()，subtract()，multiply() 和 divide()等。
但值得注意的是数组必须具有相同的形状或符合数组广播规则。</p>

<p>NumPy 中涵盖的算术运算通过下表展示，除了基本的算术运算函数外，下表中还列出对应的指数和对数函数，详细信息如下：</p>

<table>
  <thead>
    <tr>
      <th>方法</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>add()</td>
      <td>按元素添加参数</td>
    </tr>
    <tr>
      <td>subtract()</td>
      <td>从元素方面减去参数</td>
    </tr>
    <tr>
      <td>multiply()</td>
      <td>在元素方面乘以论证</td>
    </tr>
    <tr>
      <td>divide()</td>
      <td>以元素方式返回输入的真正除法</td>
    </tr>
    <tr>
      <td>logaddexp()</td>
      <td>输入的取幂之和的对数</td>
    </tr>
    <tr>
      <td>logaddexp2()</td>
      <td>base-2中输入的取幂之和的对数</td>
    </tr>
    <tr>
      <td>true_divide()</td>
      <td>以元素方式返回输入的真正除法</td>
    </tr>
    <tr>
      <td>floor_divide()</td>
      <td>返回小于或等于输入除法的最大整数</td>
    </tr>
    <tr>
      <td>negative()</td>
      <td>数字否定, 元素方面</td>
    </tr>
    <tr>
      <td>positive()</td>
      <td>数字正面, 元素方面</td>
    </tr>
    <tr>
      <td>power()</td>
      <td>第一个数组元素从第二个数组提升到幂, 逐个元素</td>
    </tr>
    <tr>
      <td>remainder()</td>
      <td>返回除法元素的余数</td>
    </tr>
    <tr>
      <td>mod()</td>
      <td>返回除法元素的余数</td>
    </tr>
    <tr>
      <td>fmod()</td>
      <td>返回除法的元素余数</td>
    </tr>
    <tr>
      <td>divmod()</td>
      <td>同时返回逐元素的商和余数</td>
    </tr>
    <tr>
      <td>absolute()</td>
      <td>逐个元素地计算绝对值</td>
    </tr>
    <tr>
      <td>fabs()</td>
      <td>以元素方式计算绝对值</td>
    </tr>
    <tr>
      <td>rint()</td>
      <td>将数组的元素舍入为最接近的整数</td>
    </tr>
    <tr>
      <td>sign()</td>
      <td>返回数字符号的元素指示</td>
    </tr>
    <tr>
      <td>heaviside()</td>
      <td>计算Heaviside阶跃函数</td>
    </tr>
    <tr>
      <td>conj()</td>
      <td>以元素方式返回复共轭</td>
    </tr>
    <tr>
      <td>conjugate()</td>
      <td>以元素方式返回复共轭</td>
    </tr>
    <tr>
      <td>exp()</td>
      <td>计算输入数组中所有元素的指数</td>
    </tr>
    <tr>
      <td>exp2()</td>
      <td>计算输入数组中所有 p 的 2**p</td>
    </tr>
    <tr>
      <td>log()</td>
      <td>自然对数, 元素方面</td>
    </tr>
    <tr>
      <td>log2()</td>
      <td>x的基数为2的对数</td>
    </tr>
    <tr>
      <td>log10()</td>
      <td>以元素方式返回输入数组的基数10对数</td>
    </tr>
    <tr>
      <td>expm1()</td>
      <td>计算数组中的所有元素吗，exp(x) - 1</td>
    </tr>
    <tr>
      <td>log1p()</td>
      <td>返回一个加上输入数组的自然对数, 逐个元素</td>
    </tr>
    <tr>
      <td>sqrt()</td>
      <td>以元素方式返回数组的非负平方根</td>
    </tr>
    <tr>
      <td>square()</td>
      <td>返回输入的元素方块</td>
    </tr>
    <tr>
      <td>cbrt()</td>
      <td>以元素方式返回数组的立方根</td>
    </tr>
    <tr>
      <td>reciprocal()</td>
      <td>以元素方式返回参数的倒数</td>
    </tr>
    <tr>
      <td>gcd()</td>
      <td>返回最大公约数</td>
    </tr>
    <tr>
      <td>lcm()</td>
      <td>返回 最小公倍数</td>
    </tr>
  </tbody>
</table>

<h3 id="2实例详解">2、实例详解</h3>

<h4 id="21add">2.1、add()</h4>
<p>add() 表示两个数组相加，add() 函数使用方法如下：</p>

<p><code class="highlighter-rouge">add(数组1,数组2,…)</code></p>

<p><strong>实例：</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">dtype</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">int_</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'第一个数组：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'第二个数组：'</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="c1"># 两个数组相加
</span><span class="k">print</span><span class="p">(</span><span class="s">'两个数组相加：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>以上结果输出为：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>第一个数组：
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]

第二个数组：
[10 10 10 10]

两个数组相加：
[[10 11 12 13]
 [14 15 16 17]
 [18 19 20 21]
 [22 23 24 25]]
</code></pre></div></div>
<p>由上可得结论，数组之间的相加维度、数据类型必须一致。</p>

<h3 id="22subtract">2.2、subtract()</h3>
<p>subtract()表示两个数组相减，subtract() 函数使用方法如下：
<code class="highlighter-rouge">subtract(数组1,数组2,…)</code></p>

<p><strong>实例：</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

a = np.arange(16, dtype = np.int_).reshape(4,4)
print('第一个数组：')
print(a)
print('\n')

print('第二个数组：')
b = np.array([10, 10, 10, 10])
print(b)
print('\n')

print('两个数组相减：')
print(np.subtract(a, b))
print('\n')
</code></pre></div></div>
<p>以上结果输出为：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>第一个数组：
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]

第二个数组：
[10 10 10 10]

两个数组相减：
[[-10  -9  -8  -7]
 [ -6  -5  -4  -3]
 [ -2  -1   0   1]
 [  2   3   4   5]]
</code></pre></div></div>

<h3 id="23multiply">2.3、multiply()</h3>
<p>multiply() 表示两个数组相乘，multiply() 函数使用方法：<code class="highlighter-rouge">multiply(数组1,数组2,…)</code></p>

<p>实例：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

a = np.arange(16, dtype = np.int_).reshape(4,4)
print('第一个数组：')
print(a)
print('\n')

print('第二个数组：')
b = np.array([10, 10, 10, 10])
print(b)
print('\n')

print('两个数组相乘：')
print(np.multiply(a, b))
print('\n')
</code></pre></div></div>

<p>输出结果为：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>第一个数组：
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]


第二个数组：
[10 10 10 10]


两个数组相乘：
[[  0  10  20  30]
 [ 40  50  60  70]
 [ 80  90 100 110]
 [120 130 140 150]]
</code></pre></div></div>

<h3 id="24divide">2.4、divide()</h3>
<p>divide() 表示两个数组相除，divide() 使用方法为：<code class="highlighter-rouge">divide(数组1,数组2,…)</code></p>

<p><strong>实例：</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="n">dtype</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">int_</span><span class="p">).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'第一个数组：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'第二个数组：'</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'两个数组相除：'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">divide</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
</code></pre></div></div>
<p>输出结果为:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>第一个数组：
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]

第二个数组：
[10 10 10 10]

两个数组相除：
[[0.  0.1 0.2 0.3]
 [0.4 0.5 0.6 0.7]
 [0.8 0.9 1.  1.1]
 [1.2 1.3 1.4 1.5]]
</code></pre></div></div>

<h3 id="25-log">2.5 log()</h3>
<p>log() 函数是取数的对数
实例：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

# 数的对数测试
c = 100
print('数字100的对数：')
print(np.log(c))
</code></pre></div></div>

<p>输出结果为：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>数字100的对数：
4.605170185988092
</code></pre></div></div>
<h3 id="26-numpypower">2.6 numpy.power()</h3>
<p>numpy.power() 函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂。</p>

<p><strong>实例：</strong></p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># NumPy 幂计算
import numpy as np

d = np.array([2, 5, 10])
print('第一个数组是：')
print(d)

print('\n')
print('调用 power 函数：')
print(np.power(d, 2))

print('\n')
print('第二个数组：')
e = np.array([1, 2, 3])
print(e)
print('\n')
print('再次调用 power 函数：')
print(np.power(d, e))
</code></pre></div></div>

<p>输出结果为：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>第一个数组是：
[ 2  5 10]

调用 power 函数：
[  4  25 100]

第二个数组：
[1 2 3]

再次调用 power 函数：
[   2   25 1000]

</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>本章节是 NumPy 位运算和算术函数运用的基本介绍，这部分的知识实例都是从简单入手，对于一个知识点，难的是综合运用，只有根基牢固才能造出大 House，希望对使用这部分知识的工程师提供更好的支撑。</p>

<h2 id="参考">参考</h2>
<p><a href="https://www.runoob.com/numpy/numpy-arithmetic-operations.html">https://www.runoob.com/numpy/numpy-arithmetic-operations.html</a>
<a href="https://www.numpy.org.cn/reference/ufuncs.html#%E6%95%B0%E5%AD%A6%E8%BF%90%E7%AE%97">https://www.numpy.org.cn/reference/ufuncs.html</a>
<a href="https://numpy.org/devdocs/reference/routines.math.html">https://numpy.org/devdocs/reference/routines.math.html</a></p>

<blockquote>
  <p>文中示例代码：<a href="https://github.com/JustDoPython/python-100-day">python-100-days</a></p>
</blockquote>
:ET