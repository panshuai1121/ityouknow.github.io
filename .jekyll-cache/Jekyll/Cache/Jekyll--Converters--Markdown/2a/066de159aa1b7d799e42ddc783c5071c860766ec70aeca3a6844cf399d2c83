I")=<blockquote>
  <p>by 小小摸虾</p>
</blockquote>

<p>定义一个函数非常简单，但是怎么定义一个函数，需要什么参数，怎么去调用却是我们需要去思考的问题。</p>

<p>如同大多数语言一样（如 Java），Python 也提供了多种参数的设定（如：默认值参数、关键字参数、形参等）。使用这些参数定义出来的代码，可以让我们适应不同的开放场景，也能简化我们的代码开发工作。</p>

<!--more-->

<h2 id="默认值参数">默认值参数</h2>

<p>我们创建一个函数，定义参数中一个或多个赋予默认值后，我们可以使用比允许的更少的参数去调用此函数，举个例子（<em>注意:以下代码都使用 python3.7 版本</em>）：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">def_param_fun</span><span class="p">(</span><span class="n">prompt</span><span class="p">,</span> <span class="n">retries</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">reminder</span><span class="o">=</span><span class="s">'Please try again!'</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">ok</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">ok</span> <span class="ow">in</span> <span class="p">(</span><span class="s">'y'</span><span class="p">,</span> <span class="s">'ye'</span><span class="p">,</span> <span class="s">'yes'</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">if</span> <span class="n">ok</span> <span class="ow">in</span> <span class="p">(</span><span class="s">'n'</span><span class="p">,</span> <span class="s">'no'</span><span class="p">,</span> <span class="s">'nop'</span><span class="p">,</span> <span class="s">'nope'</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">retries</span> <span class="o">=</span> <span class="n">retries</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">retries</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'invalid user response'</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">reminder</span><span class="p">)</span>
        
<span class="c1"># 我们可以如下进行调用
</span><span class="n">def_param_fun</span><span class="p">(</span><span class="s">'Do you really want to quit?'</span><span class="p">)</span>

<span class="n">def_param_fun</span><span class="p">(</span><span class="s">'Do you really want to quit?'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">def_param_fun</span><span class="p">(</span><span class="s">'Do you really want to quit?'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'Please, yes or no!'</span><span class="p">)</span>
</code></pre></div></div>

<p>如上所示，我们可以使用一个或多个参数去调用此函数，我们实际生产中,很多情况下会赋予函数参数默认值的情形，因此，合理使用此种参数形式可以简化我们很多工作量。</p>

<blockquote>
  <p><strong>重要：使用默认值参数时，如果我们的默认值是一个可变对象时，我们调用函数可能出现不符合我们预期的结果</strong>。如下：</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="p">[]):</span>
    <span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">l</span>
    
<span class="c1"># 此时调用函数
</span><span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="c1"># 返回值
# [1]
# [1, 2]
# [1, 2, 3]
</span></code></pre></div></div>

<blockquote>
  <p>这是由于函数在初始化时，默认值只会执行一次，所以在默认值为可变对象（列表、字典以及大多数类实例），我们可以如下操作：</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">l</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">l</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">l</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">l</span>

<span class="c1"># 再次调用函数
</span><span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

<span class="c1"># 返回值
# [1]
# [2]
# [3]
</span></code></pre></div></div>

<h2 id="可变参数">可变参数</h2>

<p>可变参数也就是我们对于函数中定义的参数是可以一个或多个可以变化的，其中 <code class="highlighter-rouge">*args</code> 代表着可以传入一个 list 或者 tuple, <code class="highlighter-rouge">**args</code> 代表着可以传入一个 dict。举个例子：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">variable_fun</span><span class="p">(</span><span class="n">kind</span><span class="p">,</span> <span class="o">*</span><span class="n">arguments</span><span class="p">,</span> <span class="o">**</span><span class="n">keywords</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"friend : "</span><span class="p">,</span> <span class="n">kind</span><span class="p">,</span> <span class="s">";"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"-"</span> <span class="o">*</span> <span class="mi">40</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">arguments</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"-"</span> <span class="o">*</span> <span class="mi">40</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">kw</span> <span class="ow">in</span> <span class="n">keywords</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">kw</span><span class="p">,</span> <span class="s">":"</span><span class="p">,</span> <span class="n">keywords</span><span class="p">[</span><span class="n">kw</span><span class="p">])</span>
        
<span class="c1"># 函数调用
</span><span class="n">variable_fun</span><span class="p">(</span><span class="s">"xiaoming"</span><span class="p">,</span>
             <span class="s">"hello xiaoming"</span><span class="p">,</span> <span class="s">"nice to meet you!"</span><span class="p">,</span>
            <span class="n">mother</span><span class="o">=</span><span class="s">"xiaoma"</span><span class="p">,</span>
            <span class="n">father</span><span class="o">=</span><span class="s">"xiaoba"</span><span class="p">,</span>
            <span class="n">son</span><span class="o">=</span><span class="s">"see you"</span><span class="p">)</span>
            
<span class="c1"># 输出结果
</span><span class="n">first</span> <span class="n">arg</span><span class="p">:</span>  <span class="n">xiaoming</span> <span class="p">...</span>
<span class="o">----------------------------------------</span>
<span class="n">hello</span> 
<span class="n">nice</span> <span class="n">to</span> <span class="n">meet</span> <span class="n">you</span><span class="err">!</span>
<span class="o">----------------------------------------</span>
<span class="n">mother</span> <span class="p">:</span> <span class="n">xiaoma</span>
<span class="n">father</span> <span class="p">:</span> <span class="n">xiaoba</span>
<span class="n">son</span> <span class="p">:</span> <span class="n">see</span> <span class="n">you</span>
</code></pre></div></div>

<p>我们还可以使用下面的方式进行调用，得到上面相同的结果：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">list01</span> <span class="o">=</span> <span class="p">[</span><span class="s">"hello xiaoming"</span><span class="p">,</span> <span class="s">"nice to meet you!"</span><span class="p">]</span>
<span class="n">dict01</span> <span class="o">=</span> <span class="p">{</span><span class="s">'mother'</span><span class="p">:</span> <span class="s">'xiaoma'</span><span class="p">,</span> <span class="s">'father'</span><span class="p">:</span> <span class="s">'xiaoba'</span><span class="p">,</span> <span class="s">'son'</span><span class="p">:</span> <span class="s">'see you'</span><span class="p">}</span>
<span class="n">variable_fun</span><span class="p">(</span><span class="s">"xiaoming"</span><span class="p">,</span> <span class="o">*</span><span class="n">list01</span><span class="p">,</span> <span class="o">**</span><span class="n">dict01</span><span class="p">)</span>
</code></pre></div></div>

<p>以上其实是 python 的解包操作，和 java 类似。</p>

<h2 id="关键字参数">关键字参数</h2>

<p>关键字参数允许你调用函数时传入0个或任意个含参数名的参数，这样可以让我们灵活的去进行参数的调用。举个例子：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 借用官网例子
</span><span class="k">def</span> <span class="nf">key_fun</span><span class="p">(</span><span class="n">voltage</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s">'a stiff'</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">'voom'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="s">'Norwegian Blue'</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"-- This key_fun wouldn't"</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' '</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"if you put"</span><span class="p">,</span> <span class="n">voltage</span><span class="p">,</span> <span class="s">"volts through it."</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"-- Lovely plumage, the"</span><span class="p">,</span> <span class="nb">type</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"-- It's"</span><span class="p">,</span> <span class="n">state</span><span class="p">,</span> <span class="s">"!"</span><span class="p">)</span>

<span class="c1"># 函数调用  
</span><span class="n">key_fun</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>                                          <span class="c1"># 1 positional argument
</span><span class="n">key_fun</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>                                  <span class="c1"># 1 keyword argument
</span><span class="n">key_fun</span><span class="p">(</span><span class="n">voltage</span><span class="o">=</span><span class="mi">1000000</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">'VOOOOOM'</span><span class="p">)</span>             <span class="c1"># 2 keyword arguments
</span><span class="n">key_fun</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="s">'VOOOOOM'</span><span class="p">,</span> <span class="n">voltage</span><span class="o">=</span><span class="mi">1000000</span><span class="p">)</span>             <span class="c1"># 2 keyword arguments
</span><span class="n">key_fun</span><span class="p">(</span><span class="s">'a million'</span><span class="p">,</span> <span class="s">'bereft of life'</span><span class="p">,</span> <span class="s">'jump'</span><span class="p">)</span>         <span class="c1"># 3 positional arguments
</span><span class="n">key_fun</span><span class="p">(</span><span class="s">'a thousand'</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="s">'pushing up the daisies'</span><span class="p">)</span>  <span class="c1"># 1 positional, 1 keyword
</span></code></pre></div></div>

<blockquote>
  <p>注意不可以重复传值,否则会报如下错误:</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># TypeError: key_fun() got multiple values for argument 'voltage'
</span><span class="n">key_fun</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">voltage</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>                             <span class="c1"># error
</span></code></pre></div></div>

<h2 id="总结">总结</h2>
<p>本节主要简单的介绍了 python 中函数参数的使用，设定的方式可以配合使用，但是也不要过多的去设计，否则会造成函数的可读性变的很差。</p>

<h2 id="代码地址">代码地址</h2>

<blockquote>
  <p>示例代码：<a href="https://github.com/JustDoPython/python-100-day/tree/master/day-017">Python-100-days-day017</a></p>
</blockquote>

:ET