I"<p>一些 Spring Boot 小技巧、小知识点</p>

<h2 id="初始化数据">初始化数据</h2>

<p>我们在做测试的时候经常需要初始化导入一些数据，如何来处理呢？会有两种选择，一种是使用 Jpa，另外一种是 Spring JDBC 。两种方式各有区别下面来详细介绍。</p>

<p><strong>使用 Jpa</strong></p>

<p>在使用<code class="highlighter-rouge">spring boot jpa</code>的情况下设置<code class="highlighter-rouge">spring.jpa.hibernate.ddl-auto</code>的属性设置为 <code class="highlighter-rouge">create</code> or <code class="highlighter-rouge">create-drop</code>的时候，Spring Boot 启动时默认会扫描 classpath 下面（项目中一般是 resources 目录）是否有<code class="highlighter-rouge">import.sql</code>，如果有机会执行<code class="highlighter-rouge">import.sql</code>脚本。</p>

<p><strong>使用 Spring JDBC</strong></p>

<p>使用 Spring JDBC 需要在配置文件中添加以下配置</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring:
    datasource:
        schema: classpath:db/schema.sql
        data: classpath:db/data.sql
      sql-script-encoding: utf-8
    jpa:
      hibernate:
        ddl-auto: none
</code></pre></div></div>

<ul>
  <li>schema ：脚本中创建表的语句</li>
  <li>data ：脚本中初始化数据的预计</li>
  <li>sql-script-encoding：设置脚本的编码</li>
</ul>

<p>Spring Boot 项目启动的时候会自动执行脚本。</p>

<p><strong>ddl-auto 四个值的解释</strong></p>

<blockquote>
  <ol>
    <li>create： 每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。</li>
    <li>create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。</li>
    <li>update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。</li>
    <li>validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
5、 none  : 什么都不做。</li>
  </ol>
</blockquote>

<p><strong>不同点</strong></p>

<p>第一种方式启动的时候 Jpa 会自动创建表，import.sql 只负责创建表单后的初始化数据。第二种方式启动的时候不会创建表，需要在初始化脚本中判断表是否存在，再初始化脚本的步骤。</p>

<blockquote>
  <p>在生产中，这两种模式都建议慎用！</p>
</blockquote>

<h2 id="thymeleaf-设置不校验-html-标签">Thymeleaf 设置不校验 html 标签</h2>

<p>默认配置下，Thymeleaf 对 .html 的内容要求很严格，比如<code class="highlighter-rouge">&lt;meta charset="UTF-8" /&gt;</code>，如果少封闭符号<code class="highlighter-rouge">/</code>，就会报错而转到错误页。也比如你在使用 Vue.js 这样的库，然后有<code class="highlighter-rouge">&lt;div v-cloak&gt;&lt;/div&gt;</code>这样的 html 代码，也会被 Thymeleaf 认为不符合要求而抛出错误。</p>

<p>通过设置 Thymeleaf 模板可以解决这个问题，下面是具体的配置:</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.thymeleaf.cache</span><span class="p">=</span><span class="s">false</span>
<span class="py">spring.thymeleaf.mode</span><span class="p">=</span><span class="s">LEGACYHTML5</span>
</code></pre></div></div>

<p>LEGACYHTML5 需要搭配一个额外的库 NekoHTML 才可用，项目中使用的构建工具是 Maven 添加如下的依赖即可完成:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>net.sourceforge.nekohtml<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>nekohtml<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>1.9.22<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<h2 id="自定义-favicon">自定义 Favicon</h2>

<p>Spring Boot 提供了一个默认的 Favicon，也就是 Spring 的 logo ，我们可以根据自己企业的需要来定制它。</p>

<p>首先需要在 application.propertie 中关闭原有的logo</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.mvc.favicon.enable</span><span class="p">=</span><span class="s">false </span>
</code></pre></div></div>

<p>在将自己的 favicon.ico 放到<code class="highlighter-rouge">src/main/resources/static</code>下 ，然后再重新启动项目就可以了。</p>

<blockquote>
  <p>文章内容已经升级到 Spring Boot 2.x</p>
</blockquote>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>

<p>参考：</p>

<ul>
  <li><a href="http://blog.csdn.net/yalishadaa/article/details/60768811">thymeleaf模板对没有结束符的HTML5标签解析出错的解决办法</a></li>
  <li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-database-initialization.html">howto-database-initialization</a></li>
</ul>

:ET