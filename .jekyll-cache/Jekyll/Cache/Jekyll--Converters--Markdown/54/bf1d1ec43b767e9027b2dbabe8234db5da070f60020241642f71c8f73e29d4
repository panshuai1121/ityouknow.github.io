I"<blockquote>
  <p>by 沉默王二</p>
</blockquote>

<p>Python 中的数据结构是通过某种方式组织在一起的数据元素的集合，这些数据元素可以是数字、字符、甚至可以是其他数据结构
在 Python 中，最基本的数据结构是序列（列表和元组），序列中的每个元素都有一个序号（元素的具体位置），这个序号叫索引，索引下标从 0 开始，以此类推……</p>

<!--more-->

<ul>
  <li>
    <p>Python 的元组与列表类似，不同之处在于元组的元素不能修改。</p>
  </li>
  <li>
    <p>元组使用小括号()，列表使用方括号[]。</p>
  </li>
</ul>

<h2 id="1-元组基本操作">1. 元组基本操作</h2>

<h3 id="11-创建元组">1.1 创建元组</h3>

<p>元组创建很简单，只需要在括号中添加元素(不需要括号也可以)，并使用逗号隔开即可。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; tup1 = ('baidu', 'google', 12, 34); 
&gt;&gt;&gt; tup2 = (1, 2, 3, 4, 5 );
&gt;&gt;&gt; tup3 = "a", "b", "c", "d";

# 创建空元组
&gt;&gt;&gt; tup4 = ()

# 查看tup4和tup3的类型
&gt;&gt;&gt; type(tup4)
&lt;class 'tuple'&gt;
&gt;&gt;&gt; type(tup3)
&lt;class 'tuple'&gt;
</code></pre></div></div>

<p>==<em>注意：</em>== 元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用，如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; TupNum = (34)   
&gt;&gt;&gt; type(TupNum)   # 不加逗号是整型
&lt;class 'int'&gt;
&gt;&gt;&gt; TupNum = (34,)
&gt;&gt;&gt; type(TupNum)  # 加上逗号变元组
&lt;class 'tuple'&gt;
</code></pre></div></div>

<p>元组与字符串类似，下标索引从 0 开始，可以对元组进行截取，组合等操作。</p>

<h3 id="12-访问元组">1.2 访问元组</h3>

<p>元组的访问和序列访问元素一样，都是通过下标索引进行访问操作</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; tup1 = ('baidu', 'google',1,2)
&gt;&gt;&gt; tup2 = (1, 2, 3, 4, 5, 6, 7)
&gt;&gt;&gt; tup1[0:2]
('baidu', 'google')
&gt;&gt;&gt; tup2[1:4]
(2, 3, 4)
</code></pre></div></div>

<h3 id="13-修改元组">1.3 修改元组</h3>

<p>元组中的值一旦定义就不能修改，但是我们可以通过元组与元组之间的连接关系来对元组进行修改，例如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; tup1 = ('baidu', 'google',1,2)
&gt;&gt;&gt; tup2 = (1, 2, 3, 4, 5, 6, 7)
&gt;&gt;&gt; tup1 + tup2
('baidu', 'google', 1, 2, 1, 2, 3, 4, 5, 6, 7)
</code></pre></div></div>

<p>==注意：== 以下修改元组属于非法操作，因为元组不支持通过索引列来修改，只能对元组进行复制和连接操作</p>

<p>==tup1[0] = 100==   （不能进行此操作）</p>

<h3 id="14-删除元组">1.4 删除元组</h3>

<p>由于元组的不可修改性，所以元组中的元素值是不允许删除的，但我们可以使用 del 语句来删除整个元组，如下实例:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python3
</span> 
<span class="n">tup1</span> <span class="o">=</span> <span class="p">(</span><span class="s">'baidu'</span><span class="p">,</span> <span class="s">'google'</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
 
<span class="k">print</span> <span class="p">(</span><span class="n">tup</span><span class="p">)</span>
<span class="k">del</span> <span class="n">tup</span><span class="p">;</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"删除后的元组 tup : "</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">tup</span><span class="p">)</span>

<span class="c1"># 报错信息如下，证明整个元组已经被删除
</span><span class="n">删除后的元组</span> <span class="n">tup1</span> <span class="p">:</span> 
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s">"tupple.py"</span><span class="p">,</span> <span class="n">line</span> <span class="mi">29</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="k">print</span><span class="p">(</span><span class="n">tup1</span><span class="p">)</span>
<span class="nb">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="s">'tup1'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
</code></pre></div></div>

<h2 id="2-元组运算符">2 元组运算符</h2>

<p>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。总而言之对整个元组进行一些运算后就会生成一个新的元组。</p>

<h3 id="21-元组求长度">2.1 元组求长度</h3>

<p>元组求长度使用运算函数 len ，如下</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 求元组tup1的长度
&gt;&gt;&gt; tup1 = ('baidu', 'google',1,2)
&gt;&gt;&gt; len(tup1)
4
</code></pre></div></div>

<h3 id="22-连接元组">2.2 连接元组</h3>

<p>两个甚至对个元组的连接使用 + 连接符，例如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; tup1 = (1,2,3)
&gt;&gt;&gt; tup2 = (4,5,6)
&gt;&gt;&gt; tup3 = (7,8,9)
&gt;&gt;&gt; tup1 + tup2 + tup3
(1, 2, 3, 4, 5, 6, 7, 8, 9)
</code></pre></div></div>

<h3 id="23-复制元组">2.3 复制元组</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tup1 = ('abc')
# 元组复制需要加上分隔符后面复制的内容就按照分隔符分隔开
(tup1,) * 3
('abc', 'abc', 'abc')
</code></pre></div></div>

<h3 id="24-判断元素">2.4 判断元素</h3>

<p>判断元组中元素是否存在使用关键字 in 进行判断，判断结果返回布尔值</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; tup1
'abc'
&gt;&gt;&gt; 'a' in tup1
True
</code></pre></div></div>

<h3 id="25-元组中指定位置元素访问">2.5 元组中指定位置元素访问</h3>

<p>和序列一样，元组中的元素同样可以使用索引号访问指定位置的元素，例如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;&gt; content = ('hello','world','!')
&gt;&gt;&gt; content
('hello', 'world', '!')
&gt;&gt;&gt; content[1:]
('world', '!')
&gt;&gt;&gt; content[:2]
('hello', 'world')
&gt;&gt;&gt; content[-1]
'!'
&gt;&gt;&gt; content[-2]
'world'
</code></pre></div></div>

<h2 id="3-元组内置函数">3 元组内置函数</h2>

<p>和列表一样，元组同样也拥有一些内置函数，这些函数用于判元组中的元素大小以及将元组做相应的转换</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#计算元组元素个数。
len(tuple)

#返回元组中元素最大值。
max(tuple)

#返回元组中元素最小值。
	min(tuple)
	
#将列表转换为元组。
	tuple(seq)
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>本节给大家介绍了 Python 数据结构之元组的操作与使用，对 Python 工程师使用列表提供了支撑。</p>

<blockquote>
  <p>示例代码：<a href="https://github.com/JustDoPython/python-100-day/tree/master/day-009">Python-100-days-day009</a></p>
</blockquote>

:ET