I"!w<blockquote>
  <p>by 轩辕御龙</p>
</blockquote>

<h1 id="python-之引用">Python 之引用</h1>

<h2 id="1-引用简介与工具引入">1. 引用简介与工具引入</h2>

<p>Python 中对于变量的处理与 C 语言有着很大的不同，Python 中的变量具有一个特殊的属性：identity，即“身份标识”。这种特殊的属性也在很多地方被称为“引用”。</p>

<!--more-->

<p>为了更加清晰地说明引用相关的问题，我们首先要介绍两个工具：一个Python的内置函数：<code class="highlighter-rouge">id()</code>；一个运算符：<code class="highlighter-rouge">is</code>；同时还要介绍一个<code class="highlighter-rouge">sys</code>模块内的函数：<code class="highlighter-rouge">getrefcount()</code>。</p>

<h3 id="11-内置函数id">1.1 内置函数<code class="highlighter-rouge">id()</code></h3>

<p><strong><code class="highlighter-rouge">id(object)</code></strong></p>

<blockquote>
  <p>Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same <a href="https://docs.python.org/3.7/library/functions.html?highlight=id#id"><code class="highlighter-rouge">id()</code></a> value.</p>

  <p>返回值为传入对象的“标识”。该标识是一个唯一的常数，在传入对象的生命周期内与之一一对应。生命周期没有重合的两个对象可能拥有相同的<code class="highlighter-rouge">id()</code>返回值。</p>
</blockquote>

<blockquote>
  <p><strong>CPython implementation detail:</strong> This is the address of the object in memory.</p>

  <p>CPython 实现细节：“标识”实际上就是对象在内存中的地址。</p>
</blockquote>

<p>——引自《<a href="https://docs.python.org/3.7/library/functions.html?highlight=id#id">Python 3.7.4 文档-内置函数-id()</a>》</p>

<p>换句话说，不论是否是 CPython 实现，一个对象的<code class="highlighter-rouge">id</code>就可以视作是其虚拟的内存地址。</p>

<h3 id="12-运算符is">1.2 运算符<code class="highlighter-rouge">is</code></h3>

<table>
  <thead>
    <tr>
      <th>运算</th>
      <th>含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>is</td>
      <td>object  identity</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>即<code class="highlighter-rouge">is</code>的作用是比较对象的标识。</p>
</blockquote>

<p>——引自《<a href="https://docs.python.org/3/library/stdtypes.html">Python 3.7.4 文档-内置类型</a>》</p>

<h3 id="13-sys模块函数getrefcount函数">1.3 <code class="highlighter-rouge">sys</code>模块函数<code class="highlighter-rouge">getrefcount()</code>函数</h3>

<p><strong><code class="highlighter-rouge">sys.getrefcount(object)</code></strong></p>

<blockquote>
  <p>Return the reference count of the <em>object</em>. The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to <a href="https://docs.python.org/3.7/library/sys.html#sys.getrefcount"><code class="highlighter-rouge">getrefcount()</code></a>.</p>

  <p>返回值是传入对象的引用计数。由于作为参数传入<code class="highlighter-rouge">getrefcount()</code>的时候产生了一次临时引用，因此返回的计数值一般要比预期多1。</p>

  <p>——引自《<a href="https://docs.python.org/3.7/library/sys.html#sys.getrefcount">Python 3.7.4 文档-sys模块——系统相关参数及函数</a>》</p>
</blockquote>

<p>此处的“引用计数”，在 <a href="https://docs.python.org/3.7/glossary.html?highlight=getrefcount">Python 文档</a>中被定义为“对象被引用的次数”。一旦引用计数归零，则对象所在的内存被释放。这是 Python 内部进行自动内存管理的一个机制。</p>

<h2 id="2-问题示例">2. 问题示例</h2>

<p>C 语言中，变量代表的就是一段固定的内存，而赋给变量的值则是存在这段地址中的数据；但对 Python 来说，变量就不再是一段固定的地址，而只是 Python 中各个对象所附着的标签。理解这一点对于理解 Python 的很多特性十分重要。</p>

<h3 id="21-对同一变量赋值">2.1 对同一变量赋值</h3>

<p>举例来说，对于如下的 C 代码：</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">c_variable</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"original address: %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">);</span> <span class="c1">// original address: 0060FEFC</span>
<span class="n">c_variable</span> <span class="o">=</span> <span class="mi">12345</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"second address: %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">);</span> <span class="c1">// second address: 0060FEFC</span>
</code></pre></div></div>

<p>对于有 C 语言编程经验的人来说，上述结果是显而易见的：变量<code class="highlighter-rouge">c_variable</code>的地址并不会因为赋给它的值有变化而发生变化。对于 C 编译器来说，变量<code class="highlighter-rouge">c_variable</code>只是协助它区别各个内存地址的标识，是直接与特定的内存地址绑定的，如图所示：</p>

<p><img src="http://www.justdopython.com/assets/images/2019/09/12/2019-09-12-python-reference-012-C.png" alt="C 语言中的变量赋值" /></p>

<p>但 Python 就不一样的。考虑如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">python_variable</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">python_variable</span><span class="p">)</span>
<span class="mi">1823863879824</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">python_variable</span> <span class="o">=</span> <span class="mi">12345</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">python_variable</span><span class="p">)</span>
<span class="mi">1823863880176</span>
</code></pre></div></div>

<p>这就有点儿意思了，更加神奇的是，即使赋给变量同一个常数，其得到的<code class="highlighter-rouge">id</code>也可能不同：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">python_variable</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">python_variable</span><span class="p">)</span>
<span class="mi">1823863880304</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">python_variable</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">python_variable</span><span class="p">)</span>
<span class="mi">1823863879408</span>
</code></pre></div></div>

<p>假如<code class="highlighter-rouge">python_variable</code>对应的数据类型是一个列表，那么：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">python_variable</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">python_variable</span><span class="p">)</span>
<span class="mi">2161457994952</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">python_variable</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">python_variable</span><span class="p">)</span>
<span class="mi">2161458037448</span>
</code></pre></div></div>

<p>得到的<code class="highlighter-rouge">id</code>值也是不同的。</p>

<p>正如前文所述，在 Python 中，变量就是一块砖，哪里需要哪里搬。每次将一个新的对象赋值给一个变量，都在内存中<strong>重新创建</strong>了一个对象，这个对象就具有新的引用值。作为一个“标签”，变量也是哪里需要哪里贴，毫无节操可言。</p>

<p><img src="http://www.justdopython.com/assets/images/2019/09/12/2019-09-12-python-reference-012-python-assignment.png" alt="Python 中的变量赋值" /></p>

<blockquote>
  <p>但要注意的是，这里还有一个问题：之所以说“即使赋给变量同一个常数，其得到的<code class="highlighter-rouge">id</code>也<strong>可能</strong>不同”，实际上是因为并不是对所有的常数都存在这种情况。以常数<code class="highlighter-rouge">1</code>为例，就有如下结果：</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">littleConst</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># 数值较小的整型对象
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">littleConst</span><span class="p">)</span>
<span class="mi">140734357607232</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">littleConst</span> <span class="o">=</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">littleConst</span><span class="p">)</span>
<span class="mi">140734357607232</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">140734357607232</span>
</code></pre></div>  </div>

  <p>可以看到，常数<code class="highlighter-rouge">1</code>对应的<code class="highlighter-rouge">id</code>一直都是相同的，没有发生变化，因此变量<code class="highlighter-rouge">littleConst</code>的<code class="highlighter-rouge">id</code>也就没有变化。</p>

  <p>这是因为Python在内存中维护了一个特定数量的常量池，对于一定范围内的数值均不再创建新的对象，而直接在这个常量池中进行分配。实际上在我的机器上使用如下代码可以得到这个常量池的范围是 [0, 256] ，而 256 刚好是一个字节的二进制码可以表示的值的个数。</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">constant</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">300</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">constant</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">range</span><span class="p">(</span><span class="mi">300</span><span class="p">)[</span><span class="n">constant</span><span class="p">]:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"常量池最大值为："</span><span class="p">,</span> <span class="p">(</span><span class="n">constant</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
        <span class="k">break</span>
<span class="c1"># 常量池最大值为： 256
</span></code></pre></div>  </div>
</blockquote>

<p>相应地，对于数值进行加减乘除并将结果赋给原来的变量，都会改变变量对应的引用值：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">change_ref</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">change_ref</span><span class="p">)</span>
<span class="mi">2161457772304</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">change_ref</span> <span class="o">=</span> <span class="n">change_ref</span> <span class="o">+</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">change_ref</span>
<span class="mi">10001</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">change_ref</span><span class="p">)</span>
<span class="mi">2161457772880</span>
</code></pre></div></div>

<p>比较代码块第 3、8行的输出结果，可以看到对数值型变量执行加法并赋值会改变对应变量的引用值。这样的表现应该比较好理解。因为按照 Python 运算符的优先级，<code class="highlighter-rouge">change_ref = change_ref + 1</code>实际上就是<code class="highlighter-rouge">change_ref = (change_ref + 1)</code>，对变量<code class="highlighter-rouge">change_ref</code>对应的数值加1之后得到的是一个新的数值，再将这个新的数值赋给<code class="highlighter-rouge">change_ref</code> ，于是<code class="highlighter-rouge">change_ref</code>的引用也就随之改变。列表也一样：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_change_ref</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_change_ref</span><span class="p">)</span>
<span class="mi">2161458326920</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_change_ref</span> <span class="o">=</span> <span class="n">list_change_ref</span> <span class="o">+</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_change_ref</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_change_ref</span><span class="p">)</span>
<span class="mi">2161458342792</span>
</code></pre></div></div>

<h3 id="22-不变的情况">2.2 不变的情况</h3>

<p>与数值不同，Python 中对列表对象的操作还表现出另一种特性。考虑下面的代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_nonchange</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_nonchange</span><span class="p">)</span>
<span class="mi">2161458355400</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_nonchange</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_nonchange</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_nonchange</span><span class="p">)</span>
<span class="mi">2161458355400</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_nonchange</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_nonchange</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_nonchange</span><span class="p">)</span>
<span class="mi">2161458355400</span>
</code></pre></div></div>

<p>观察代码块第 3、8、13三行，输出相同。也就是说，对于列表而言，可以通过直接操作变量本身，从而在不改变其引用的情况下改变所引用的值。</p>

<p>更进一步地，如果是两个变量同时引用同一个列表，则对其中一个变量本身直接进行操作，也会影响到另一个变量的值：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_example</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_same_ref</span> <span class="o">=</span> <span class="n">list_example</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_example</span><span class="p">)</span>
<span class="mi">1823864610120</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_same_ref</span><span class="p">)</span>
<span class="mi">1823864610120</span>
</code></pre></div></div>

<p>显然此时的变量<code class="highlighter-rouge">list_example</code>和<code class="highlighter-rouge">list_same_ref</code>的<code class="highlighter-rouge">id</code>是一致的。现在改变<code class="highlighter-rouge">list_example</code>所引用的列表值：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_example</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_same_ref</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
</code></pre></div></div>

<p>可以看到<code class="highlighter-rouge">list_same_ref</code>所引用的列表值也随之变化了。再看看相应地<code class="highlighter-rouge">id</code>：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_example</span><span class="p">)</span>
<span class="mi">1823864610120</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_same_ref</span><span class="p">)</span>
<span class="mi">1823864610120</span>
</code></pre></div></div>

<p>两个变量的<code class="highlighter-rouge">id</code>都没有发生变化。再调用<code class="highlighter-rouge">append()</code>方法：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">list_example</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_example</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_same_ref</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_example</span><span class="p">)</span>
<span class="mi">1823864610120</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_same_ref</span><span class="p">)</span>
<span class="mi">1823864610120</span>
</code></pre></div></div>

<p>删除元素：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">list_example</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_example</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">list_same_ref</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_example</span><span class="p">)</span>
<span class="mi">1823864610120</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">list_same_ref</span><span class="p">)</span>
<span class="mi">1823864610120</span>
</code></pre></div></div>

<p>在上述所有对列表的操作中，均没有改变相应元素的引用。</p>

<p>也就是说，对于变量本身进行的操作并不会创建新的对象，而是会直接改变原有对象的值。</p>

<h3 id="23-一个特殊的地方">2.3 一个特殊的地方</h3>

<blockquote>
  <p>本小节示例灵感来自[<a href="https://www.cnblogs.com/yuyan/archive/2012/04/21/2461673.html">关于Python中的引用</a>]</p>
</blockquote>

<p>数值数据和列表还存在一个特殊的差异。考虑如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="mi">2161457772336</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
<span class="mi">2161457774512</span>
</code></pre></div></div>

<p>有了前面的铺垫，这样的结果很显得很自然。显然在对变量<code class="highlighter-rouge">num</code>进行增1操作的时候，还是计算出新值然后进行赋值操作，因此引用发生了变化。</p>

<p>但列表却不然。见如下代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">li</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="mi">2161458469960</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">li</span> <span class="o">+=</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="mi">2161458469960</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">li</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</code></pre></div></div>

<p>注意第 4 行。明明进行的是“相加再赋值”操作，为什么有了跟前面不一样的结果呢？检查变量<code class="highlighter-rouge">li</code>的值，发现变量的值也确实发生了改变，但引用却没有变。</p>

<p>实际上这是因为加法运算符在 Python 中存在重载的情况，对列表对象和数值对象来说，加法运算的底层实现是完全不同的，在简单的加法中，列表的运算还是创建了一个新的列表对象；但在简写的加法运算<code class="highlighter-rouge">+=</code>实现中，则并没有创建新的列表对象。这一点要十分注意。</p>

<h2 id="3-原理解析">3. 原理解析</h2>

<p>前面（<a href="http://www.ityouknow.com/python/2019/08/03/python-003.html">第3天：Python 变量与数据类型</a>）我们提到过，Python 中的六个标准数据类型实际上分为两大类：<strong>可变数据</strong>和<strong>不可变数据</strong>。其中，列表、字典和集合均为“可变对象”；而数字、字符串和元组均为“不可变对象”。实际上上面演示的数值数据（即数字）和列表之间的差异正是这两种不同的数据类型导致的。</p>

<p>由于数字是不可变对象，我们不能够对数值本身进行任何可以改变数据值的操作。因此在 Python 中，每出现一个数值都意味着需要另外分配一个新的内存空间（常量池中的数值例外）。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">const_ref</span> <span class="o">=</span> <span class="mi">10000</span> <span class="c1"># 
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">const_ref</span> <span class="o">==</span> <span class="mi">10000</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">const_ref</span> <span class="ow">is</span> <span class="mi">10000</span>
<span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">const_ref</span><span class="p">)</span>
<span class="mi">2161457773424</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>
<span class="mi">2161457773136</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">getrefcount</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">getrefcount</span><span class="p">(</span><span class="n">const_ref</span><span class="p">)</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">getrefcount</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>
<span class="mi">3</span>
</code></pre></div></div>

<p>前 9 行的代码容易理解：即使是同样的数值，也可能具有不同的引用值。关键在于这个值是否来自于同一个对象。</p>

<p>而第 12 行的代码则说明除了<code class="highlighter-rouge">getrefcount()</code>函数的引用外，变量<code class="highlighter-rouge">const_ref</code>所引用的对象就只有1个引用，也就是变量<code class="highlighter-rouge">const_ref</code>。一旦变量<code class="highlighter-rouge">const_ref</code>被释放，则相应的对象引用计数归零，也会被释放；并且只有此时，这个对象对应的内存空间才是真正的“被释放”。</p>

<p>而作为可变对象，列表的值是可以在不新建对象的情况下进行改变的，因此对列表对象本身直接进行操作，是可以达到“改变变量值而不改变引用”的目的的。</p>

<h2 id="4-总结">4. 总结</h2>

<p>对于列表、字典和集合这些“可变对象”，通过对变量所引用对象本身进行操作，可以只改变变量的值而不改变变量的引用；但对于数字、字符串和元组这些“不可变对象”，由于对象本身是不能够进行变值操作的，因此要想改变相应变量的值，就必须要新建对象，再把新建对象赋值给变量。</p>

<p>通过这样的探究，也能更加生动地理解“万物皆对象”的深刻含义。0</p>

<blockquote>
  <p>示例代码：<a href="https://github.com/JustDoPython/python-100-day/tree/master/day-012">Python-100-days-day012</a></p>
</blockquote>

<h2 id="5-参考资料">5. 参考资料</h2>

<p><a href="https://docs.python.org/3.7/library/functions.html?highlight=id#id">Python 3.7.4 文档-内置函数-id()</a></p>

<p><a href="https://docs.python.org/3/library/stdtypes.html">Python 3.7.4 文档-内置类型</a></p>

<p><a href="https://docs.python.org/3.7/library/sys.html#sys.getrefcount">Python 3.7.4 文档-sys模块——系统相关参数及函数</a></p>

<p><a href="https://docs.python.org/3.7/glossary.html?highlight=getrefcount">Python 3.7.4 文档-术语表</a></p>

<p><a href="https://www.cnblogs.com/yuyan/archive/2012/04/21/2461673.html">关于Python中的引用</a></p>

:ET