I"pG<p>Spring Boot 对常用的数据库支持外，对 Nosql 数据库也进行了封装自动化。</p>

<h2 id="redis-介绍">Redis 介绍</h2>

<p>Redis 是目前业界使用最广泛的内存数据存储。相比 Memcached，Redis 支持更丰富的数据结构，例如 hashes, lists, sets 等，同时支持数据持久化。除此之外，Redis 还提供一些类数据库的特性，比如事务，HA，主从库。可以说 Redis 兼具了缓存系统和数据库的一些特性，因此有着丰富的应用场景。本文介绍 Redis 在 Spring Boot 中两个典型的应用场景。</p>

<h2 id="如何使用">如何使用</h2>

<p>1、引入依赖包</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-pool2<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>Spring Boot 提供了对 Redis 集成的组件包：<code class="highlighter-rouge">spring-boot-starter-data-redis</code>，<code class="highlighter-rouge">spring-boot-starter-data-redis</code>依赖于<code class="highlighter-rouge">spring-data-redis</code> 和 <code class="highlighter-rouge">lettuce</code> 。Spring Boot 1.0 默认使用的是 Jedis 客户端，2.0 替换成 Lettuce，但如果你从 Spring Boot 1.5.X 切换过来，几乎感受不大差异，这是因为 <code class="highlighter-rouge">spring-boot-starter-data-redis</code> 为我们隔离了其中的差异性。</p>

<p>Lettuce 是一个可伸缩线程安全的 Redis 客户端，多个线程可以共享同一个 RedisConnection，它利用优秀 netty NIO 框架来高效地管理多个连接。</p>

<p>2、添加配置文件</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Redis数据库索引（默认为0）
</span><span class="py">spring.redis.database</span><span class="p">=</span><span class="s">0  </span>
<span class="c"># Redis服务器地址
</span><span class="py">spring.redis.host</span><span class="p">=</span><span class="s">localhost</span>
<span class="c"># Redis服务器连接端口
</span><span class="py">spring.redis.port</span><span class="p">=</span><span class="s">6379  </span>
<span class="c"># Redis服务器连接密码（默认为空）
</span><span class="py">spring.redis.password</span><span class="p">=</span>
<span class="c"># 连接池最大连接数（使用负值表示没有限制） 默认 8
</span><span class="py">spring.redis.lettuce.pool.max-active</span><span class="p">=</span><span class="s">8</span>
<span class="c"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
</span><span class="py">spring.redis.lettuce.pool.max-wait</span><span class="p">=</span><span class="s">-1</span>
<span class="c"># 连接池中的最大空闲连接 默认 8
</span><span class="py">spring.redis.lettuce.pool.max-idle</span><span class="p">=</span><span class="s">8</span>
<span class="c"># 连接池中的最小空闲连接 默认 0
</span><span class="py">spring.redis.lettuce.pool.min-idle</span><span class="p">=</span><span class="s">0</span>
</code></pre></div></div>

<p>3、添加 cache 的配置类</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableCaching</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="kd">extends</span> <span class="nc">CachingConfigurerSupport</span><span class="o">{</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">KeyGenerator</span> <span class="nf">keyGenerator</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">KeyGenerator</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">generate</span><span class="o">(</span><span class="nc">Object</span> <span class="n">target</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span> <span class="o">:</span> <span class="n">params</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>注意我们使用了注解：<code class="highlighter-rouge">@EnableCaching</code>来开启缓存。</p>

<p>3、好了，接下来就可以直接使用了</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@SpringBootTest</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestRedis</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">StringRedisTemplate</span> <span class="n">stringRedisTemplate</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">RedisTemplate</span> <span class="n">redisTemplate</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">stringRedisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">().</span><span class="na">set</span><span class="o">(</span><span class="s">"aaa"</span><span class="o">,</span> <span class="s">"111"</span><span class="o">);</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">(</span><span class="s">"111"</span><span class="o">,</span> <span class="n">stringRedisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">"aaa"</span><span class="o">));</span>
    <span class="o">}</span>
    
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testObj</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span><span class="o">=</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"aa@126.com"</span><span class="o">,</span> <span class="s">"aa"</span><span class="o">,</span> <span class="s">"aa123456"</span><span class="o">,</span> <span class="s">"aa"</span><span class="o">,</span><span class="s">"123"</span><span class="o">);</span>
        <span class="nc">ValueOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">User</span><span class="o">&gt;</span> <span class="n">operations</span><span class="o">=</span><span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
        <span class="n">operations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"com.neox"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="n">operations</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"com.neo.f"</span><span class="o">,</span> <span class="n">user</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="c1">//redisTemplate.delete("com.neo.f");</span>
        <span class="kt">boolean</span> <span class="n">exists</span><span class="o">=</span><span class="n">redisTemplate</span><span class="o">.</span><span class="na">hasKey</span><span class="o">(</span><span class="s">"com.neo.f"</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">exists</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"exists is true"</span><span class="o">);</span>
        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"exists is false"</span><span class="o">);</span>
        <span class="o">}</span>
       <span class="c1">// Assert.assertEquals("aa", operations.get("com.neo.f").getUserName());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>以上都是手动使用的方式，如何在查找数据库的时候自动使用缓存呢，看下面；</p>

<p>4、自动根据方法生成缓存</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/getUser"</span><span class="o">)</span>
    <span class="nd">@Cacheable</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">"user-key"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span><span class="o">=</span><span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="s">"aa@126.com"</span><span class="o">,</span> <span class="s">"aa"</span><span class="o">,</span> <span class="s">"aa123456"</span><span class="o">,</span> <span class="s">"aa"</span><span class="o">,</span><span class="s">"123"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"若下面没出现“无缓存的时候调用”字样且能打印出数据表示测试成功"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>其中 value 的值就是缓存到 Redis 中的 key</p>

<h2 id="共享-session">共享 Session</h2>

<p>分布式系统中，Session 共享有很多的解决方案，其中托管到缓存中应该是最常用的方案之一，</p>

<h3 id="spring-session-官方说明">Spring Session 官方说明</h3>

<p>Spring Session provides an API and implementations for managing a user’s session information.</p>

<p>Spring Session 提供了一套创建和管理 Servlet HttpSession 的方案。Spring Session 提供了集群 Session（Clustered Sessions）功能，默认采用外置的 Redis 来存储 Session 数据，以此来解决 Session 共享的问题。</p>

<h3 id="如何使用-1">如何使用</h3>

<p>1、引入依赖</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework.session<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-session-data-redis<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>2、Session 配置：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableRedisHttpSession</span><span class="o">(</span><span class="n">maxInactiveIntervalInSeconds</span> <span class="o">=</span> <span class="mi">86400</span><span class="o">*</span><span class="mi">30</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>maxInactiveIntervalInSeconds: 设置 Session 失效时间，使用 Redis Session 之后，原 Spring Boot 的 server.session.timeout 属性不再生效。</p>
</blockquote>

<p>好了，这样就配置好了，我们来测试一下</p>

<p>3、测试</p>

<p>添加测试方法获取 sessionid</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/uid"</span><span class="o">)</span>
<span class="nc">String</span> <span class="nf">uid</span><span class="o">(</span><span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
    <span class="no">UUID</span> <span class="n">uid</span> <span class="o">=</span> <span class="o">(</span><span class="no">UUID</span><span class="o">)</span> <span class="n">session</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"uid"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">uid</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">uid</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="n">session</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"uid"</span><span class="o">,</span> <span class="n">uid</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>登录 Redis 输入 <code class="highlighter-rouge">keys '*sessions*'</code></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t&lt;spring:session:sessions:db031986-8ecc-48d6-b471-b137a3ed6bc4
t(spring:session:expirations:1472976480000
</code></pre></div></div>

<p>其中 1472976480000 为失效时间，意思是这个时间后 Session 失效，<code class="highlighter-rouge">db031986-8ecc-48d6-b471-b137a3ed6bc4</code> 为 sessionId,登录 http://localhost:8080/uid 发现会一致，就说明 Session 已经在 Redis 里面进行有效的管理了。</p>

<h3 id="如何在两台或者多台中共享-session">如何在两台或者多台中共享 Session</h3>

<p>其实就是按照上面的步骤在另一个项目中再次配置一次，启动后自动就进行了 Session 共享。</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples/tree/master/spring-boot-redis">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples/tree/master/spring-boot-redis">示例代码-码云</a></strong></p>

<blockquote>
  <p>文章内容已经升级到 Spring Boot 2.x</p>
</blockquote>

<h2 id="参考">参考</h2>

<p><a href="http://emacoo.cn/blog/spring-redis">Redis的两个典型应用场景</a> <br />
<a href="https://segmentfault.com/a/1190000004358410">SpringBoot应用之分布式会话</a></p>
:ET