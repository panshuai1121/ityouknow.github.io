I"+B<p>Docker 技术发展为微服务落地提供了更加便利的环境，使用 Docker 部署 Spring Boot 其实非常简单，这篇文章我们就来简单学习下。</p>

<p>首先构建一个简单的 Spring Boot 项目，然后给项目添加 Docker 支持，最后对项目进行部署。</p>

<h2 id="一个简单-spring-boot-项目">一个简单 Spring Boot 项目</h2>

<p>在 <code class="highlighter-rouge">pom.xml</code> 中 ，使用 Spring Boot 2.0 相关依赖</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;parent&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;version&gt;</span>2.0.0.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/parent&gt;</span>
</code></pre></div></div>

<p>添加 web 和测试依赖</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
     <span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>创建一个 DockerController，在其中有一个<code class="highlighter-rouge">index()</code>方法，访问时返回：<code class="highlighter-rouge">Hello Docker!</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DockerController</span> <span class="o">{</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hello Docker!"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动类</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DockerApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">DockerApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>添加完毕后启动项目，启动成功后浏览器访问：<code class="highlighter-rouge">http://localhost:8080/</code>，页面返回：<code class="highlighter-rouge">Hello Docker!</code>，说明 Spring Boot 项目配置正常。</p>

<h2 id="spring-boot-项目添加-docker-支持">Spring Boot 项目添加 Docker 支持</h2>

<p>在 <code class="highlighter-rouge">pom.xml-properties </code>中添加 Docker 镜像名称</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;properties&gt;</span>
	<span class="nt">&lt;docker.image.prefix&gt;</span>springboot<span class="nt">&lt;/docker.image.prefix&gt;</span>
<span class="nt">&lt;/properties&gt;</span>
</code></pre></div></div>

<p>plugins 中添加 Docker 构建插件：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;build&gt;</span>
	<span class="nt">&lt;plugins&gt;</span>
		<span class="nt">&lt;plugin&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;/plugin&gt;</span>
		<span class="c">&lt;!-- Docker maven plugin --&gt;</span>
		<span class="nt">&lt;plugin&gt;</span>
			<span class="nt">&lt;groupId&gt;</span>com.spotify<span class="nt">&lt;/groupId&gt;</span>
			<span class="nt">&lt;artifactId&gt;</span>docker-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
			<span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
			<span class="nt">&lt;configuration&gt;</span>
				<span class="nt">&lt;imageName&gt;</span>${docker.image.prefix}/${project.artifactId}<span class="nt">&lt;/imageName&gt;</span>
				<span class="nt">&lt;dockerDirectory&gt;</span>src/main/docker<span class="nt">&lt;/dockerDirectory&gt;</span>
				<span class="nt">&lt;resources&gt;</span>
					<span class="nt">&lt;resource&gt;</span>
						<span class="nt">&lt;targetPath&gt;</span>/<span class="nt">&lt;/targetPath&gt;</span>
						<span class="nt">&lt;directory&gt;</span>${project.build.directory}<span class="nt">&lt;/directory&gt;</span>
						<span class="nt">&lt;include&gt;</span>${project.build.finalName}.jar<span class="nt">&lt;/include&gt;</span>
					<span class="nt">&lt;/resource&gt;</span>
				<span class="nt">&lt;/resources&gt;</span>
			<span class="nt">&lt;/configuration&gt;</span>
		<span class="nt">&lt;/plugin&gt;</span>
		<span class="c">&lt;!-- Docker maven plugin --&gt;</span>
	<span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span>
</code></pre></div></div>

<p>在目录<code class="highlighter-rouge">src/main/docker</code>下创建 Dockerfile 文件，Dockerfile 文件用来说明如何来构建镜像。</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM openjdk:8-jdk-alpine
VOLUME /tmp
ADD spring-boot-docker-1.0.jar app.jar
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]
</code></pre></div></div>

<p>这个 Dockerfile 文件很简单，构建 Jdk 基础环境，添加 Spring Boot Jar 到镜像中，简单解释一下:</p>

<ul>
  <li>FROM ，表示使用 Jdk8 环境 为基础镜像，如果镜像不是本地的会从 DockerHub 进行下载</li>
  <li>VOLUME ，VOLUME 指向了一个<code class="highlighter-rouge">/tmp</code>的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用<code class="highlighter-rouge">/tmp</code>作为工作目录。这个命令的效果是：在宿主机的<code class="highlighter-rouge">/var/lib/docker</code>目录下创建一个临时文件并把它链接到容器中的<code class="highlighter-rouge">/tmp</code>目录</li>
  <li>ADD ，拷贝文件并且重命名</li>
  <li>ENTRYPOINT ，为了缩短 Tomcat 的启动时间，添加<code class="highlighter-rouge">java.security.egd</code>的系统属性指向<code class="highlighter-rouge">/dev/urandom</code>作为 ENTRYPOINT</li>
</ul>

<blockquote>
  <p>这样 Spring Boot 项目添加 Docker 依赖就完成了。</p>
</blockquote>

<h2 id="构建打包环境">构建打包环境</h2>

<p>我们需要有一个 Docker 环境来打包 Spring Boot 项目，在 Windows 搭建 Docker 环境很麻烦，因此我这里以 Centos 7 为例。</p>

<h3 id="安装-docker-环境">安装 Docker 环境</h3>

<p>安装</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nb">install </span>docker
</code></pre></div></div>

<p>安装完成后，使用下面的命令来启动 docker 服务，并将其设置为开机启动：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service docker start
chkconfig docker on

<span class="c">#LCTT 译注：此处采用了旧式的 sysv 语法，如采用CentOS 7中支持的新式 systemd 语法，如下：</span>
systemctl  start docker.service
systemctl  <span class="nb">enable </span>docker.service
</code></pre></div></div>

<p>使用Docker 中国加速器</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi  /etc/docker/daemon.json

<span class="c">#添加后：</span>
<span class="o">{</span>
    <span class="s2">"registry-mirrors"</span>: <span class="o">[</span><span class="s2">"https://registry.docker-cn.com"</span><span class="o">]</span>,
    <span class="s2">"live-restore"</span>: <span class="nb">true</span>
<span class="o">}</span>
</code></pre></div></div>

<p>重新启动docker</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl restart docker
</code></pre></div></div>

<p>输入<code class="highlighter-rouge">docker version</code> 返回版本信息则安装正常。</p>

<h3 id="安装jdk">安装JDK</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yum <span class="nt">-y</span> <span class="nb">install </span>java-1.8.0-openjdk<span class="k">*</span>
</code></pre></div></div>

<p>配置环境变量
打开 <code class="highlighter-rouge">vim /etc/profile</code>
添加一下内容</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.161-0.b14.el7_4.x86_64 
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin 
</code></pre></div></div>

<p>修改完成之后，使其生效</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> /etc/profile
</code></pre></div></div>

<p>输入<code class="highlighter-rouge">java -version</code> 返回版本信息则安装正常。</p>

<h3 id="安装maven">安装MAVEN</h3>

<p>下载：<code class="highlighter-rouge">http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz</code></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 解压</span>
<span class="nb">tar </span>vxf apache-maven-3.5.2-bin.tar.gz
<span class="c">## 移动</span>
<span class="nb">mv </span>apache-maven-3.5.2 /usr/local/maven3
</code></pre></div></div>

<p>修改环境变量， 在<code class="highlighter-rouge">/etc/profile</code>中添加以下几行</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/local/maven3
<span class="nb">export </span>MAVEN_HOME
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:<span class="k">${</span><span class="nv">MAVEN_HOME</span><span class="k">}</span>/bin
</code></pre></div></div>

<p>记得执行<code class="highlighter-rouge">source /etc/profile</code>使环境变量生效。</p>

<p>输入<code class="highlighter-rouge">mvn -version</code> 返回版本信息则安装正常。</p>

<blockquote>
  <p>这样整个构建环境就配置完成了。</p>
</blockquote>

<h2 id="使用-docker-部署-spring-boot-项目">使用 Docker 部署 Spring Boot 项目</h2>

<p>将项目 <code class="highlighter-rouge">spring-boot-docker</code> 拷贝服务器中，进入项目路径下进行打包测试。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#打包</span>
mvn package
<span class="c">#启动</span>
java <span class="nt">-jar</span> target/spring-boot-docker-1.0.jar
</code></pre></div></div>

<p>看到 Spring Boot 的启动日志后表明环境配置没有问题，接下来我们使用 DockerFile 构建镜像。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn package docker:build
</code></pre></div></div>

<p>第一次构建可能有点慢，当看到以下内容的时候表明构建成功：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
Step 1 : FROM openjdk:8-jdk-alpine
 <span class="nt">---</span><span class="o">&gt;</span> 224765a6bdbe
Step 2 : VOLUME /tmp
 <span class="nt">---</span><span class="o">&gt;</span> Using cache
 <span class="nt">---</span><span class="o">&gt;</span> b4e86cc8654e
Step 3 : ADD spring-boot-docker-1.0.jar app.jar
 <span class="nt">---</span><span class="o">&gt;</span> a20fe75963ab
Removing intermediate container 593ee5e1ea51
Step 4 : ENTRYPOINT java <span class="nt">-Djava</span>.security.egd<span class="o">=</span>file:/dev/./urandom <span class="nt">-jar</span> /app.jar
 <span class="nt">---</span><span class="o">&gt;</span> Running <span class="k">in </span>85d558a10cd4
 <span class="nt">---</span><span class="o">&gt;</span> 7102f08b5e95
Removing intermediate container 85d558a10cd4
Successfully built 7102f08b5e95
<span class="o">[</span>INFO] Built springboot/spring-boot-docker
<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>
<span class="o">[</span>INFO] BUILD SUCCESS
<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>
<span class="o">[</span>INFO] Total <span class="nb">time</span>: 54.346 s
<span class="o">[</span>INFO] Finished at: 2018-03-13T16:20:15+08:00
<span class="o">[</span>INFO] Final Memory: 42M/182M
<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>
</code></pre></div></div>

<p>使用<code class="highlighter-rouge">docker images</code>命令查看构建好的镜像：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker images
REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE
springboot/spring-boot-docker   latest              99ce9468da74        6 seconds ago       117.5 MB
</code></pre></div></div>

<p><code class="highlighter-rouge">springboot/spring-boot-docker</code> 就是我们构建好的镜像，下一步就是运行该镜像</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-p</span> 8080:8080 <span class="nt">-t</span> springboot/spring-boot-docker
</code></pre></div></div>

<p>启动完成之后我们使用<code class="highlighter-rouge">docker ps</code>查看正在运行的镜像：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
CONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                    NAMES
049570da86a9        springboot/spring-boot-docker   <span class="s2">"java -Djava.security"</span>   30 seconds ago      Up 27 seconds       0.0.0.0:8080-&gt;8080/tcp   determined_mahavira
</code></pre></div></div>

<p>可以看到我们构建的容器正在在运行，访问浏览器：<code class="highlighter-rouge">http://192.168.0.x:8080/</code>,返回</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello Docker!
</code></pre></div></div>

<p>说明使用 Docker 部署 Spring Boot 项目成功！</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>

<h2 id="参考">参考</h2>

<p><a href="https://spring.io/guides/gs/spring-boot-docker/">Spring Boot with Docker</a><br />
<a href="https://lw900925.github.io/docker/docker-springboot.html">Docker：Spring Boot 应用发布到 Docker</a></p>

:ET