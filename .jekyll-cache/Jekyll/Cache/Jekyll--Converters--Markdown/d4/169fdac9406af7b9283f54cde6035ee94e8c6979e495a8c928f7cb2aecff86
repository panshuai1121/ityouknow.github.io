I"<Q<p>我知道大家这段时间看了我写关于 docker 相关的几篇文章，不疼不痒的，仍然没有感受 docker 的便利，是的，我也是这样认为的，I know your feeling 。</p>

<p>前期了解概念什么的确实比较无聊，请不要着急精彩马上开始，当大家对 docker 相关概念有所了解之后，后面我会结合 Spring Boot 给大家来一系列的小例子，会让大家感受到使用 Docker 就是这么爽！</p>

<p>今天给大家演出的导演是 Docker 家族的 docker-compose ，主演是 Spring Boot、Nginx、Mysql 三位又红又紫的大碗，名导名演在一起的时候往往是准备搞事情，接下来又一场经典大片值得大家期待。</p>

<p><img src="http://favorites.ren/assets/images/2018/springboot/qifen.gif" alt="" /></p>

<p>Spring Boot + Nginx + Mysql 是实际工作中最常用的一个组合，最前端使用 Nginx 代理请求转发到后端 Spring Boot 内嵌的 Tomcat 服务，Mysql 负责业务中数据相关的交互，那么在没有 docker 之前，我们是如何来搞定这些环境的呢？</p>

<ul>
  <li>1、安装 Nginx，配置 Nginx 相关信息，重启。</li>
  <li>2、安装 Mysql ，配置字符集时区等信息，重启，最后初始化脚本。</li>
  <li>3、启动 Spring Boot 项目，整体进行联调测试。</li>
</ul>

<p>大家看我只写了三行，但其实搭建这些环境的时候还挺费事的，但这还不是结局，在用了一段时间时候需要迁移到另外一个环境，怎么办又需要重新搞一次？正常情况下，测试环境、SIT 环境、UAT 环境、生产环境！我们需要重复搭建四次。有人说不就是搭建四次吗？也没什么大不了的，那么我想告诉你，Too yong ,Too Simple 。</p>

<p><img src="http://favorites.ren/assets/images/2018/springboot/tooyang.jpg" alt="" /></p>

<p>让我们看看以下几个因素：</p>

<p>第一，这只是一个最简单的案例，如果项目涉及到 MongoDB、Redis、ES … 一些列的环境呢？
第二，如果你经常搭建环境或者调试程序，你就会知道什么是环境问题？有的时候明明是一模一样的配置，但是到了另外一个环境就是跑不起来。于是你花费很多时间来查找，最后才发现是少了一个参数或者逗号的问题，或者是系统内核版本不一致、或者你最后也没搞懂是为什么！只能再换另外一台服务器，那么使用 Docker 呢就可以完美的避开这些坑。</p>

<p>好了，废话不多说我们就开始吧！</p>

<h2 id="spring-boot-案例">Spring Boot 案例</h2>

<p>首先我们先准备一个 Spring Boot 使用 Mysql 的小场景，我们做这样一个示例，使用 Spring Boot 做一个 Web 应用，提供一个按照 IP 地址统计访问次数的方法，每次请求时将统计数据存入 Mysql 并展示到页面中。</p>

<h3 id="配置信息">配置信息</h3>

<p><strong>依赖包</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
     <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>mysql<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>mysql-connector-java<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
		<span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>主要添加了 Spring Boot Web 支持，使用 Jpa 操作数据库、添加 Myql 驱动包等。</p>

<p><strong>配置文件</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=true
</code></pre></div></div>

<p>配置了数据库的链接信息，以及 Jpa 更新表模式、方言和是否显示Sql</p>

<h3 id="核心代码">核心代码</h3>

<p>核心代码很简单，每过来一个请求，判断是否已经统计过，如果没有统计新增数据，如果有统计数据更新数据。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">VisitorController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">VisitorRepository</span> <span class="n">repository</span><span class="o">;</span>
	
    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">ip</span><span class="o">=</span><span class="n">request</span><span class="o">.</span><span class="na">getRemoteAddr</span><span class="o">();</span>
        <span class="nc">Visitor</span> <span class="n">visitor</span><span class="o">=</span><span class="n">repository</span><span class="o">.</span><span class="na">findByIp</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">visitor</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">visitor</span><span class="o">=</span><span class="k">new</span> <span class="nc">Visitor</span><span class="o">();</span>
            <span class="n">visitor</span><span class="o">.</span><span class="na">setIp</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
            <span class="n">visitor</span><span class="o">.</span><span class="na">setTimes</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">visitor</span><span class="o">.</span><span class="na">setTimes</span><span class="o">(</span><span class="n">visitor</span><span class="o">.</span><span class="na">getTimes</span><span class="o">()+</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
        <span class="k">return</span> <span class="s">"I have been seen ip "</span><span class="o">+</span><span class="n">visitor</span><span class="o">.</span><span class="na">getIp</span><span class="o">()+</span><span class="s">" "</span><span class="o">+</span><span class="n">visitor</span><span class="o">.</span><span class="na">getTimes</span><span class="o">()+</span><span class="s">" times."</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实体类和 Repository 层代码比较简单，这里就不贴出来了，大家感兴趣可以下载源码查看。</p>

<p>以上内容都完成后，启动项目，访问：<code class="highlighter-rouge">http://localhost:8080/</code> 我们就可以看到这样的返回结果：</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I have been seen ip 0:0:0:0:0:0:0:1 1 times.
</code></pre></div></div>

<p>再访问一次会变成</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I have been seen ip 0:0:0:0:0:0:0:1 2 times.
</code></pre></div></div>

<p>多次访问一直叠加，说明演示项目开发完成。</p>

<h2 id="docker-化改造">Docker 化改造</h2>

<p>首先我们将目录改造成这样一个结构</p>

<p><img src="http://favorites.ren/assets/images/2018/springboot/mulu.png" alt="" /></p>

<p>我们先从最外层说起：</p>

<ul>
  <li><code class="highlighter-rouge">docker-compose.yaml</code>：docker-compose 的核心文件，描述如何构建整个服务</li>
  <li><code class="highlighter-rouge">nginx</code>：有关 nginx 的配置</li>
  <li><code class="highlighter-rouge">app</code>：Spring Boot 项目地址</li>
</ul>

<p>如果我们需要对 Mysql 有特殊的定制，也可以在最外层创建 mysql 文件夹，在此目录下进行配置。</p>

<h3 id="docker-composeyaml-文件详解"><code class="highlighter-rouge">docker-compose.yaml</code> 文件详解</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>version: '3'
services:
  nginx:
   container_name: v-nginx
   image: nginx:1.13
   restart: always
   ports:
   - 80:80
   - 443:443
   volumes:
   - ./nginx/conf.d:/etc/nginx/conf.d
    
  mysql:
   container_name: v-mysql
   image: mysql/mysql-server:5.7
   environment:
    MYSQL_DATABASE: test
    MYSQL_ROOT_PASSWORD: root
    MYSQL_ROOT_HOST: '%'
   ports:
   - "3306:3306"
   restart: always
    
  app:
    restart: always
    build: ./app
    working_dir: /app
    volumes:
      - ./app:/app
      - ~/.m2:/root/.m2
    expose:
      - "8080"
    depends_on:
      - nginx
      - mysql
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker
</code></pre></div></div>

<ul>
  <li><code class="highlighter-rouge">version: '3'</code>： 表示使用第三代语法来构建 docker-compose.yaml 文件。</li>
  <li><code class="highlighter-rouge">services</code>: 用来表示 compose 需要启动的服务，我们可以看出此文件中有三个服务分别为：nginx、mysql、app。</li>
  <li><code class="highlighter-rouge">container_name</code>:  容器名称</li>
  <li><code class="highlighter-rouge">environment</code>: 此节点下的信息会当作环境变量传入容器，此示例中 mysql 服务配置了数据库、密码和权限信息。</li>
  <li><code class="highlighter-rouge">ports</code>: 表示对外开放的端口</li>
  <li><code class="highlighter-rouge">restart: always</code> 表示如果服务启动不成功会一直尝试。</li>
  <li><code class="highlighter-rouge">volumes</code>: 加载本地目录下的配置文件到容器目标地址下</li>
  <li><code class="highlighter-rouge">depends_on</code>：可以配置依赖服务，表示需要先启动 <code class="highlighter-rouge">depends_on</code> 下面的服务后，再启动本服务。</li>
  <li><code class="highlighter-rouge">command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker</code>: 表示以这个命令来启动项目，<code class="highlighter-rouge">-Dspring-boot.run.profiles=docker</code>表示使用 <code class="highlighter-rouge">application-docker.properties</code>文件配置信息进行启动。</li>
</ul>

<h3 id="nginx-文件解读">Nginx 文件解读</h3>

<p>nginx 在目录下有一个文件 app.conf，主要配置了服务转发信息</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
    listen 80;
    charset utf-8;
    access_log off;

    location / {
        proxy_pass http://app:8080;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static {
        access_log   off;
        expires      30d;

        alias /app/static;
    }
}
</code></pre></div></div>

<p>这块内容比较简单，配置请求转发，将80端口的请求转发到服务 app 的8080端口。其中<code class="highlighter-rouge">proxy_pass http://app:8080</code>这块的配置信息需要解释一下，这里使用是<code class="highlighter-rouge">app</code>而不是<code class="highlighter-rouge">localhost</code>，是因为他们没有在一个容器中，在一组 compose 的服务通讯需要使用 services 的名称进行访问。</p>

<h3 id="spring-boot-项目改造">Spring Boot 项目改造</h3>

<p>在<code class="highlighter-rouge">app</code>目录下也就是和<code class="highlighter-rouge">pom.xm</code>文件同级添加<code class="highlighter-rouge">Dockerfile</code>文件，文件内容如下：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM maven:3.5-jdk-8
</code></pre></div></div>

<p>只有一句，依赖于基础镜像<code class="highlighter-rouge">maven3.5</code>和<code class="highlighter-rouge">jdk 1.8</code>。因为在<code class="highlighter-rouge">docker-compose.yaml</code>文件设置了项目启动命令，这里不需要再添加启动命令。</p>

<p>在项目的<code class="highlighter-rouge">resources</code>目录下创建<code class="highlighter-rouge">application-dev.properties</code>和<code class="highlighter-rouge">application-docker.properties</code>文件</p>

<ul>
  <li><code class="highlighter-rouge">application-dev.properties</code> 中的配置信息和上面一致</li>
  <li><code class="highlighter-rouge">application-docker.properties</code> 中的配置信息做稍微的改造，将数据库的连接信息由<code class="highlighter-rouge">jdbc:mysql://localhost:3306/test</code>改为<code class="highlighter-rouge">jdbc:mysql://mysql:3306/test</code> 。</li>
</ul>

<p>这样我们所有的配置都已经完成。</p>

<h2 id="部署">部署</h2>

<p>我们将项目拷贝到服务器中进行测试，服务器需要先安装 Docker 和 Docker Compos 环境，如果不了解的朋友可以查看我前面的两篇文章：</p>

<ul>
  <li><a href="http://www.ityouknow.com/docker/2018/03/07/docker-introduction.html">Docker(一)：Docker入门教程</a></li>
  <li><a href="http://www.ityouknow.com/docker/2018/03/22/docker-compose.html">Docker(四)：Docker 三剑客之 Docker Compose</a></li>
</ul>

<p>将项目拷贝到服务器中，进入目录<code class="highlighter-rouge">cd  dockercompose-springboot-mysql-nginx</code></p>

<p><strong>启动服务：<code class="highlighter-rouge">docker-compose up</code></strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@VM_73_217_centos dockercompose-springboot-mysql-nginx]# docker-compose up
Creating network "dockercomposespringbootmysqlnginx_default" with the default driver
Creating v-nginx ... done
Creating v-mysql ... done
Creating dockercomposespringbootmysqlnginx_app_1 ... done
Attaching to v-nginx, v-mysql, dockercomposespringbootmysqlnginx_app_1
v-mysql  | [Entrypoint] MySQL Docker Image 5.7.21-1.1.4
v-mysql  | [Entrypoint] Initializing database
app_1    | [INFO] Scanning for projects...
... 
app_1    | 2018-03-26 02:54:55.658  INFO 1 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
app_1    | 2018-03-26 02:54:55.660  INFO 1 --- [           main] com.neo.ComposeApplication               : Started ComposeApplication in 14.869 seconds (JVM running for 30.202)
</code></pre></div></div>

<p>看到信息<code class="highlighter-rouge">Tomcat started on port(s): 8080</code>表示服务启动成功。也可以使用<code class="highlighter-rouge">docker-compose up -d</code>后台启动</p>

<p>访问服务器地址；<code class="highlighter-rouge">http://58.87.69.230/</code>，返回：<code class="highlighter-rouge">I have been seen ip 172.19.0.2 1 times.</code> 表示整体服务启动成功</p>

<p><strong>使用<code class="highlighter-rouge">docker-compose ps</code>查看项目中目前的所有容器</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@VM_73_217_centos dockercompose-springboot-mysql-nginx]# docker-compose ps
                 Name                                Command                  State                        Ports                  
----------------------------------------------------------------------------------------------------------------------------------
dockercomposespringbootmysqlnginx_app_1   /usr/local/bin/mvn-entrypo ...   Up             8080/tcp                                
v-mysql                                   /entrypoint.sh mysqld            Up (healthy)   0.0.0.0:3306-&gt;3306/tcp, 33060/tcp       
v-nginx                                   nginx -g daemon off;             Up             0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp
</code></pre></div></div>

<p>可以看到项目中服务的状态、命令、端口等信息。</p>

<p><strong>关闭服务<code class="highlighter-rouge">docker-compose down</code></strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[root@VM_73_217_centos dockercompose-springboot-mysql-nginx]# docker-compose down
Stopping dockercomposespringbootmysqlnginx_app_1 ... done
Stopping visitor-nginx                           ... done
Stopping visitor-mysql                           ... done
Removing dockercomposespringbootmysqlnginx_app_1 ... done
Removing visitor-nginx                           ... done
Removing visitor-mysql                           ... done
</code></pre></div></div>

<h3 id="docker-compose-顺序">docker-compose 顺序</h3>

<p>在使用 docker-compose 启动的时候经常会出现项目报 Mysql 连接异常，跟踪了一天终于发现了问题。 docker-compose 虽然可以通过<code class="highlighter-rouge">depends_on</code> 来定义服务启动的顺序，但是无法确定服务是否启动完成，因此会出现这样一个现象，Mysql 服务启动比较慢，当 Spring Boot 项目已经启动起来，但是 Mysql 还没有初始化好，这样当项目连接 Mysql 数据库的时候，就会出现连接数据库的异常。</p>

<p>针对这样的问题，有两种解决方案:</p>

<p>1、足够的容错和重试机制，比如连接数据库，在初次连接不上的时候，服务消费者可以不断重试，直到连接上服务。也就是在服务中定义： <code class="highlighter-rouge">restart: always</code></p>

<p>2、同步等待，使用<code class="highlighter-rouge">wait-for-it.sh</code>或者其他<code class="highlighter-rouge">shell</code>脚本将当前服务启动阻塞，直到被依赖的服务加载完毕。这种方案后期可以尝试使用。</p>

<h2 id="总结">总结</h2>

<p>没有对比就没有伤害，在没有使用 Docker 之前，我们需要搭建这样一个环境的话，需要安装 Nginx、Mysql ，再进行一系列的配置调试，还要担心各种环境问题；使用 Docker 之后简单两个命令就完成服务的上线、下线。</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up
docker-compose down
</code></pre></div></div>

<p>其实容器技术对部署运维的优化还有很多，这只是刚刚开始，后面使用了 Swarm 才会真正感受到它的便利和强大。</p>

<p><strong><a href="https://github.com/ityouknow/spring-boot-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-boot-examples">示例代码-码云</a></strong></p>

<h2 id="参考">参考</h2>

<p><a href="https://hellokoding.com/docker-compose-with-spring-boot-mysql-nginx/">Docker Compose with Spring Boot, MySQL and NGINX</a></p>

:ET