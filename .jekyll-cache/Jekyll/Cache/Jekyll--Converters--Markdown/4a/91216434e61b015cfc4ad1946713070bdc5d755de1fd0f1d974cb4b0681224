I"C0<p>上一篇<a href="http://www.ityouknow.com/springcloud/2017/05/22/springcloud-config-git.html">springcloud(六)：配置中心git示例</a>留了一个小问题，当重新修改配置文件提交后，客户端获取的仍然是修改前的信息，这个问题我们先放下，待会再讲。国内很多公司都使用的svn来做代码的版本控制，我们先介绍以下如何使用svn+Spring Cloud Config来做配置中心。</p>

<h2 id="svn版本">svn版本</h2>

<p>同样先示例server端的代码，基本步骤一样。</p>

<h3 id="1添加依赖">1、添加依赖</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.springframework.cloud<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>spring-cloud-config-server<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
	<span class="nt">&lt;dependency&gt;</span>
		<span class="nt">&lt;groupId&gt;</span>org.tmatesoft.svnkit<span class="nt">&lt;/groupId&gt;</span>
		<span class="nt">&lt;artifactId&gt;</span>svnkit<span class="nt">&lt;/artifactId&gt;</span>
	<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>

<p>需要多引入svnkitr包</p>

<h3 id="2配置文件">2、配置文件</h3>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">server</span><span class="p">:</span>
  <span class="py">port</span><span class="p">:</span> <span class="s">8001</span>

<span class="py">spring</span><span class="p">:</span>
  <span class="py">cloud</span><span class="p">:</span>
    <span class="py">config</span><span class="p">:</span>
      <span class="py">server</span><span class="p">:</span>
        <span class="py">svn</span><span class="p">:</span>
          <span class="py">uri</span><span class="p">:</span> <span class="s">http://192.168.0.6/svn/repo/config-repo</span>
          <span class="py">username</span><span class="p">:</span> <span class="s">username</span>
          <span class="py">password</span><span class="p">:</span> <span class="s">password</span>
        <span class="py">default-label</span><span class="p">:</span> <span class="s">trunk</span>
  <span class="py">profiles</span><span class="p">:</span>
    <span class="py">active</span><span class="p">:</span> <span class="s">subversion</span>
  <span class="py">application</span><span class="p">:</span>
    <span class="py">name</span><span class="p">:</span> <span class="s">spring-cloud-config-server</span>
</code></pre></div></div>

<p>和git版本稍有区别，需要显示声明subversion.</p>

<h3 id="3启动类">3、启动类</h3>

<p>启动类没有变化，添加<code class="highlighter-rouge">@EnableConfigServer</code>激活对配置中心的支持</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@EnableConfigServer</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConfigServerApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">ConfigServerApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="4测试">4、测试</h3>

<p><strong>服务端测试</strong></p>

<p>访问：<code class="highlighter-rouge">http://localhost:8001/neo-config-dev.properties</code>，返回：<code class="highlighter-rouge">neo.hello: hello im dev</code>，说明服务端可以正常读取到svn代码库中的配置信息。修改配置文件<code class="highlighter-rouge">neo-config-dev.properties</code>中配置信息为：<code class="highlighter-rouge">neo.hello=hello im dev update</code>,再次在浏览器访问<code class="highlighter-rouge">http://localhost:8001/neo-config-dev.properties</code>，返回：<code class="highlighter-rouge">neo.hello: hello im dev update</code>。说明server端会自动读取最新提交的内容</p>

<p><strong>客户端测试</strong></p>

<p>客户端直接使用上一篇示例项目<code class="highlighter-rouge">spring-cloud-config-client</code>来测试，配置基本不用变动。启动项目后访问：<code class="highlighter-rouge">http://localhost:8002/hello，返回：</code>hello im dev update<code class="highlighter-rouge">说明已经正确的从server端获取到了参数。同样修改svn配置并提交，再次访问</code><code class="highlighter-rouge">http://localhost:8002/hello</code>``依然获取的是旧的信息，和git版本的问题一样。</p>

<h2 id="refresh">refresh</h2>

<p>现在来解决上一篇的遗留问题，这个问题在svn版本中依然存在。Spring Cloud Config分服务端和客户端，服务端负责将git（svn）中存储的配置文件发布成REST接口，客户端可以从服务端REST接口获取配置。但客户端并不能主动感知到配置的变化，从而主动去获取新的配置。客户端如何去主动获取新的配置信息呢，springcloud已经给我们提供了解决方案，每个客户端通过POST方法触发各自的<code class="highlighter-rouge">/refresh</code>。</p>

<p>修改<code class="highlighter-rouge">spring-cloud-config-client</code>项目已到达可以refresh的功能。</p>

<h3 id="1添加依赖-1">1、添加依赖</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p>增加了<code class="highlighter-rouge">spring-boot-starter-actuator</code>包，<code class="highlighter-rouge">spring-boot-starter-actuator</code>是一套监控的功能，可以监控程序在运行时状态，其中就包括<code class="highlighter-rouge">/refresh</code>的功能。</p>

<h3 id="2-开启更新机制">2、 开启更新机制</h3>

<p>需要给加载变量的类上面加载<code class="highlighter-rouge">@RefreshScope</code>，在客户端执行<code class="highlighter-rouge">/refresh</code>的时候就会更新此类下面的变量值。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RefreshScope</span> <span class="c1">// 使用该注解的类，会在接到SpringCloud配置中心配置刷新的时候，自动将新的配置更新到该类对应的字段中。</span>
<span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${neo.hello}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">hello</span><span class="o">;</span>

    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">from</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">hello</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="3测试">3、测试</h3>

<p><em>springboot 1.5.X 以上默认开通了安全认证，所以需要在配置文件<code class="highlighter-rouge">application.properties</code>添加以下配置</em></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">management.security.enabled</span><span class="p">=</span><span class="s">false</span>
</code></pre></div></div>

<p>OK 这样就改造完了，以post请求的方式来访问<code class="highlighter-rouge">http://localhost:8002/refresh</code> 就会更新修改后的配置文件。</p>

<p>我们再次来测试，首先访问<code class="highlighter-rouge">http://localhost:8002/hello</code>，返回：<code class="highlighter-rouge">hello im dev</code>，我将库中的值修改为<code class="highlighter-rouge">hello im dev update</code>。在win上面打开cmd执行<code class="highlighter-rouge">curl -X POST http://localhost:8002/refresh</code>，返回<code class="highlighter-rouge">["neo.hello"]</code>说明已经更新了<code class="highlighter-rouge">neo.hello</code>的值。我们再次访问<code class="highlighter-rouge">http://localhost:8002/hello</code>，返回：<code class="highlighter-rouge">hello im dev update</code>,客户端已经得到了最新的值。</p>

<p>每次手动刷新客户端也很麻烦，有没有什么办法只要提交代码就自动调用客户端来更新呢，github的webhook是一个好的办法。</p>

<h3 id="4webhook">4、webhook</h3>

<p>WebHook是当某个事件发生时，通过发送http post请求的方式来通知信息接收方。Webhook来监测你在Github.com上的各种事件，最常见的莫过于push事件。如果你设置了一个监测push事件的Webhook，那么每当你的这个项目有了任何提交，这个Webhook都会被触发，这时Github就会发送一个HTTP POST请求到你配置好的地址。</p>

<p>如此一来，你就可以通过这种方式去自动完成一些重复性工作，比如，你可以用Webhook来自动触发一些持续集成（CI）工具的运作，比如Travis CI；又或者是通过 Webhook 去部署你的线上服务器。下图就是github上面的webhook配置。</p>

<p><img src="http://favorites.ren/assets/images/2017/springcloud/webhook.jpg" alt="" /></p>

<ul>
  <li><code class="highlighter-rouge">Payload URL</code> ：触发后回调的URL</li>
  <li><code class="highlighter-rouge">Content type</code> ：数据格式，两种一般使用json</li>
  <li><code class="highlighter-rouge">Secret</code> ：用作给POST的body加密的字符串。采用HMAC算法</li>
  <li><code class="highlighter-rouge">events</code> ：触发的事件列表。</li>
</ul>

<table>
  <thead>
    <tr>
      <th>events事件类型</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>push</td>
      <td>仓库有push时触发。默认事件</td>
    </tr>
    <tr>
      <td>create</td>
      <td>当有分支或标签被创建时触发</td>
    </tr>
    <tr>
      <td>delete</td>
      <td>当有分支或标签被删除时触发</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>svn也有类似的hook机制，每次提交后会触发post-commit脚本，我们可以在这里写一些post请求</p>
</blockquote>

<p>这样我们就可以利用hook的机制去触发客户端的更新，但是当客户端越来越多的时候hook支持的已经不够优雅，另外每次增加客户端都需要改动hook也是不现实的。其实Spring Cloud给了我们更好解决方案，后面文章来介绍。</p>

<p><strong><a href="https://github.com/ityouknow/spring-cloud-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-cloud-examples">示例代码-码云</a></strong></p>

<hr />
<p><strong>作者：纯洁的微笑</strong><br />
<strong>出处：<a href="http://www.ityouknow.com/springcloud/2017/05/23/springcloud-config-svn-refresh.html">http://www.ityouknow.com/</a></strong>    <br />
<strong>版权归作者所有，转载请注明出处</strong></p>
:ET