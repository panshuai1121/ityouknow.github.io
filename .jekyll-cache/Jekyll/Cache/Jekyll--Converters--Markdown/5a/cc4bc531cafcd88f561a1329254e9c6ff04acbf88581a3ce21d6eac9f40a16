I"Ek<p>by 极光</p>

<p>今天来为大家介绍 Django 框架的模型部分，模型是真实数据的简单明确的描述，它包含了储存的数据所必要的字段和行为，Django 遵循 DRY Principle 。它的目标是你只需要定义数据模型，然后其它的杂七杂八代码你都不用关心，它们会自动从模型生成。</p>

<!--more-->

<h2 id="django-模型">Django 模型</h2>

<p>Django 中模型是真实数据的简单明确的描述，它包含了储存的数据所必要的字段和行为，在创建模型前需要先配置好数据库。 Django 对各种数据库提供了很好的支持，包括：PostgreSQL、MySQL、SQLite、Oracle等，Django 为这些数据库提供了统一的调用 API。 我们可以根据自己业务需求选择不同的数据库。</p>

<h2 id="数据库配置">数据库配置</h2>

<p>Python 内置 SQLite，所以你无需安装额外东西来使用它，在 <code class="highlighter-rouge">TestProject</code> 项目目录下，打开 <code class="highlighter-rouge">TestProject/settings.py</code> 配置文件， 已经配置了 SQLite 作为默认数据库。当然如果在真实项目中，我们可以换一个更具扩展性的数据库，如Mysql等。具体配置操作如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># TestProject/settings.py
</span>
<span class="c1"># Database
</span><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.sqlite3'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">'db.sqlite3'</span><span class="p">),</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>配置说明：</p>

<ul>
  <li>ENGINE：数据库驱动，可选（’django.db.backends.sqlite3’，’django.db.backends.postgresql’，’django.db.backends.mysql’，或 ‘django.db.backends.oracle’）</li>
  <li>NAME：数据库的名称（这里使用的SQLite对应的是一个数据库文件路径）</li>
  <li>USER：数据库登陆用户名</li>
  <li>PASSWORD：数据库登陆密码</li>
  <li>HOST：数据库所在主机连接地址（可以是域名或IP地址）</li>
  <li>PORT：数据库所在主机服务端口号</li>
</ul>

<h2 id="创建模型">创建模型</h2>

<p>还是以我们之前创建的投票应用为基础，在这个应用中创建两个模型–Question和Choice。</p>

<ul>
  <li>Question（问题）中包含提问的内容和发布的时间两个字段。</li>
  <li>Choice（选项）中包含针对问题的选项以及已投票数，每个问题可以有多个选项。</li>
</ul>

<p>下面我们将以上模型描述通过编辑 <code class="highlighter-rouge">polls/models.py</code> 文件定义出来。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/models.py
</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>


<span class="k">class</span> <span class="nc">Question</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">question_text</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">pub_date</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="s">'发布日期'</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Choice</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Question</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">)</span>
    <span class="n">choice_text</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">votes</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

</code></pre></div></div>

<p>这里有以下几点需要注意：</p>

<ol>
  <li>每个模型被定义为 django.db.models.Model 类的子类。</li>
  <li>每个模型有一些类变量，它们都表示模型里的一个数据库字段。</li>
  <li>每个字段都是 Field 类的实例，如 CharField 对应数据库中的字符串字段。</li>
  <li>每个 Field 类实例变量的名字也是字段名，如 question_text，定义时需要遵循数据库字段规则。</li>
  <li>实例变量的名字可以定义备注名，方便代码理解，如 pub_date = models.DateTimeField(‘发布日期’)。</li>
  <li>某些 Field 类实例定义时需要参数，还有一些可选参数，对应数据库表结构，如 CharField 类需要定义长度max_length。</li>
  <li>使用 ForeignKey 可以定义表外键关联，如本例中用 ForeignKey 定义了每个 Choice 都要关联到一个 Question 对象上。</li>
</ol>

<h2 id="激活模型">激活模型</h2>

<p>通过配置上面 <code class="highlighter-rouge">models.py</code> 类中创建模型的代码，已经足够 Django 为我们创建数据库和相应表结构了，现在我们将 <code class="highlighter-rouge">polls</code> 应用安装到我们 <code class="highlighter-rouge">TestProject</code> 项目中。
首先再次打开 <code class="highlighter-rouge">TestProject/settings.py</code> 配置文件，在配置类 <code class="highlighter-rouge">INSTALLED_APPS</code> 中添加 <code class="highlighter-rouge">polls</code> 应用的点式路径  <code class="highlighter-rouge">'polls.apps.PollsConfig'</code>，配置完成如下所示：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># TestProject/settings.py
</span>
<span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'polls.apps.PollsConfig'</span><span class="p">,</span>   <span class="c1">#新增polls路径
</span>    <span class="s">'django.contrib.admin'</span><span class="p">,</span>
    <span class="s">'django.contrib.auth'</span><span class="p">,</span>
    <span class="s">'django.contrib.contenttypes'</span><span class="p">,</span>
    <span class="s">'django.contrib.sessions'</span><span class="p">,</span>
    <span class="s">'django.contrib.messages'</span><span class="p">,</span>
    <span class="s">'django.contrib.staticfiles'</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<blockquote>
  <p>因为 PollsConfig 类写在文件 polls/apps.py 中，所以它的点式路径是 ‘polls.apps.PollsConfig’</p>
</blockquote>

<p>保存配置并退出，然后运行 <code class="highlighter-rouge">makemigrations</code> 命令, Django 会检测你对模型文件的修改，并且把修改的部分储存为一次<code class="highlighter-rouge">迁移</code>（迁移是 Django 对于模型定义即你的数据库结构的变化的储存形式）。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python manage.py makemigrations polls
Migrations <span class="k">for</span> <span class="s1">'polls'</span>:
  polls/migrations/0001_initial.py
    - Create model Question
    - Create model Choice
</code></pre></div></div>

<p>执行成功后，就可以再执行 <code class="highlighter-rouge">migrate</code> 命令，将你在模型中定义的数据库修改同步到应用的数据库表结构上，执行结果如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python manage.py migrate
Operations to perform:
  Apply all migrations: polls
Running migrations:
  Applying polls.0001_initial... OK
</code></pre></div></div>

<blockquote>
  <p>数据库<code class="highlighter-rouge">迁移</code>操作被分解成生成和应用两个命令是为了让你能够在代码控制系统上提交迁移数据并使其能在多个应用里使用；这不仅仅会让开发更加简单，也给别的开发者和生产环境中的使用带来方便。</p>
</blockquote>

<h2 id="模型操作">模型操作</h2>

<p>对模型对象的操作，本质上就是数据库数据的操作。下面我们就通过对模型对象操作实现对数据库记录基本的CURD操作。</p>

<h3 id="新增数据">新增数据</h3>

<p>编辑 <code class="highlighter-rouge">TestProject</code> 项目下 <code class="highlighter-rouge">polls/views.py</code> 文件代码，通过访问 <code class="highlighter-rouge">URL</code> 在 <code class="highlighter-rouge">Question</code> 模型对应表中添加数据。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/views.py
</span><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span>

<span class="c1"># Create your views here.
</span><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span>
<span class="kn">from</span> <span class="nn">polls.models</span> <span class="kn">import</span> <span class="n">Choice</span><span class="p">,</span> <span class="n">Question</span>
<span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>

<span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"你好，这是一个投票页面。"</span><span class="p">)</span>

<span class="c1"># 增加问题描述信息
</span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">question</span> <span class="o">=</span> <span class="n">Question</span><span class="p">(</span><span class="n">question_text</span><span class="o">=</span><span class="s">'双十一你在哪个平台剁手？'</span><span class="p">,</span><span class="n">pub_date</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">now</span><span class="p">())</span>
    <span class="n">question</span><span class="p">.</span><span class="n">save</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"新增投票成功！"</span><span class="p">)</span>

</code></pre></div></div>

<p>再编辑 <code class="highlighter-rouge">polls/urls.py</code> 文件代码，新增一条 <code class="highlighter-rouge">add</code> 的路由，代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/urls.py
</span><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'index'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'add'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">add</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'add'</span><span class="p">),</span>    <span class="c1">#新增add路由
</span><span class="p">]</span>
</code></pre></div></div>

<p>保存后，通过 <code class="highlighter-rouge">python manage.py runserver 127.0.0.1:8080</code> 命令启动本地开发服务器，启动后在浏览器中输入URL地址 <code class="highlighter-rouge">http://127.0.0.1:8080/polls/add</code> ，会返回如下页面表示新增数据成功。</p>

<p><img src="http://www.justdopython.com/assets/images/2019/python/python_web_django_11.jpg" alt="" /></p>

<p>接下来我们再刷新下页面，这样就会再增加一条数据，然后我们把这两条记录查出来。</p>

<h3 id="查询数据">查询数据</h3>

<p>Django 提供了多种方式来查询出数据库记录，如查询上面 <code class="highlighter-rouge">Question</code> 模型对应全部数据，某个id的数据以及通过多条件过滤得到所需要的数据。依然编辑 <code class="highlighter-rouge">TestProject</code> 项目下 <code class="highlighter-rouge">polls/views.py</code> 文件，增加查询对应代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/views.py
# …… 省略部分代码
</span>
<span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c1"># 通过objects这个模型管理器的all()获得所有数据行，相当于SQL中的SELECT * FROM question
</span>    <span class="n">questionList</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="c1"># 获取单个对象
</span>    <span class="n">response2</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1"># 相当于SQL中的WHERE id=1，可设置条件过滤
</span>    <span class="n">response3</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1">#根据id字段排序
</span>    <span class="n">response5</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">order_by</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span>

    <span class="n">res</span> <span class="o">=</span> <span class="s">""</span>
    <span class="c1"># 遍历所有对象
</span>    <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">questionList</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">q</span><span class="p">.</span><span class="n">question_text</span> <span class="o">+</span> <span class="s">" &lt;br /&gt;"</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"查询所有问题：&lt;br /&gt;"</span> <span class="o">+</span> <span class="n">res</span><span class="p">)</span>

</code></pre></div></div>

<p>再编辑 <code class="highlighter-rouge">polls/urls.py</code> 文件代码，新增一条 <code class="highlighter-rouge">query</code> 的路由，代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/urls.py
</span><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'index'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'add'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">add</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'add'</span><span class="p">),</span>  
    <span class="n">path</span><span class="p">(</span><span class="s">'query'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">query</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'query'</span><span class="p">),</span>  <span class="c1">#新增的query路由
</span><span class="p">]</span>
</code></pre></div></div>

<p>然后再浏览器中输入 URL <code class="highlighter-rouge">http://127.0.0.1:8080/polls/query</code> ，看到如下图所求请求结果：</p>

<p><img src="http://www.justdopython.com/assets/images/2019/python/python_web_django_12.jpg" alt="" /></p>

<p>可以看到出现两条一样的记录，但是 <code class="highlighter-rouge">id</code> 不同，不过这正符合我们的预期，下面我们将对第一条数据进行修改和删除。</p>

<h3 id="修改数据和删除">修改数据和删除</h3>

<p>修改和删除数据可以操作一条或多条记录，这取决于你的查询条件，再次编辑 <code class="highlighter-rouge">TestProject</code> 项目下 <code class="highlighter-rouge">polls/views.py</code> 文件，增加修改和删除对应代码：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/views.py
# …… 省略部分代码
</span>
<span class="c1">#修改数据
</span><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">question1</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">question1</span><span class="p">.</span><span class="n">question_text</span> <span class="o">=</span> <span class="s">'天猫和京东你会选哪个？'</span>
    <span class="n">question1</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>

    <span class="c1"># 通过条件过滤的方式也可以更新一条或多条数据
</span>    <span class="c1"># Question.objects.filter(id=1).update(question_text='天猫和京东你会选哪个？')
</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"更新id=1："</span> <span class="o">+</span> <span class="n">question1</span><span class="p">.</span><span class="n">question_text</span><span class="p">)</span>

<span class="c1">#删除数据
</span><span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">question2</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">question2</span><span class="p">.</span><span class="n">delete</span><span class="p">()</span>

    <span class="c1"># 通过条件过滤的方式也可以删除一条或多条数据
</span>    <span class="c1"># Question.objects.filter(id=2).delete()
</span>
    <span class="c1"># 删除所有数据
</span>    <span class="c1"># Question.objects.all().delete()
</span>
    <span class="n">res3</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">questionList</span> <span class="o">=</span> <span class="n">Question</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
    <span class="c1"># 遍历所有对象
</span>    <span class="k">for</span> <span class="n">q</span> <span class="ow">in</span> <span class="n">questionList</span><span class="p">:</span>
        <span class="n">res3</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="nb">id</span><span class="p">)</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">q</span><span class="p">.</span><span class="n">question_text</span> <span class="o">+</span> <span class="s">" &lt;br /&gt;"</span>
    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="s">"删除后查询：&lt;br /&gt;"</span> <span class="o">+</span> <span class="n">res3</span><span class="p">)</span>
</code></pre></div></div>

<p>再编辑 <code class="highlighter-rouge">polls/urls.py</code> 文件代码，新增一条 <code class="highlighter-rouge">query</code> 的路由，代码如下：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># polls/urls.py
</span><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'index'</span><span class="p">),</span>
    <span class="n">path</span><span class="p">(</span><span class="s">'add'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">add</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'add'</span><span class="p">),</span>  
    <span class="n">path</span><span class="p">(</span><span class="s">'query'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">query</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'query'</span><span class="p">),</span> 
    <span class="n">path</span><span class="p">(</span><span class="s">'update'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">update</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'update'</span><span class="p">),</span>  <span class="c1"># 新增update路由
</span>    <span class="n">path</span><span class="p">(</span><span class="s">'del'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">delete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'del'</span><span class="p">),</span>  <span class="c1"># 新增del路由
</span><span class="p">]</span>
</code></pre></div></div>

<p>完成以上代码配置，我们就可以通过访问 URL <code class="highlighter-rouge">http://127.0.0.1:8080/polls/update</code> 实现第一条数据的更新操作，请求后返回页面如下：</p>

<p><img src="http://www.justdopython.com/assets/images/2019/python/python_web_django_15.jpg" alt="" /></p>

<p>这样我们就把第一条数据的问题描述更新了，再次通过 URL <code class="highlighter-rouge">http://127.0.0.1:8080/polls/query</code> 查询下所有数据，可以看到返回页面如下：</p>

<p><img src="http://www.justdopython.com/assets/images/2019/python/python_web_django_16.jpg" alt="" /></p>

<p>好，更新成功后，我们再试下删除数据了，通过查看删除相关代码是把 <code class="highlighter-rouge">id</code> 为2的数据删除了，这次我们访问的 URL <code class="highlighter-rouge">http://127.0.0.1:8080/polls/del</code>，然后返回删除后再次查询所有记录的页面，如下图：</p>

<p><img src="http://www.justdopython.com/assets/images/2019/python/python_web_django_17.jpg" alt="" /></p>

<p>可以看到只剩下一条数据，说明我们已经删除成功了。</p>

<h2 id="总结">总结</h2>

<p>本文为大家介绍了 Django 的模型，通过上面学习我们了解到模型功能的强大，为我们基于数据库的开发节省了大量工作量。Django还有模板，表单，路由，认证，基本的数据库管理等等内建功能，接下来将进一步的介绍 Django 提供的其他功能。</p>

<p>参考</p>

<ul>
  <li><a href="https://docs.djangoproject.com/zh-hans/2.2/">Django 中文文档：https://docs.djangoproject.com/zh-hans/2.2/</a></li>
  <li><a href="https://www.w3cschool.cn/django/">Django W3C介绍：https://www.w3cschool.cn/django/</a></li>
</ul>

<p><a href="https://github.com/JustDoPython/python-100-day">示例代码：https://github.com/JustDoPython/python-100-day</a></p>
:ET