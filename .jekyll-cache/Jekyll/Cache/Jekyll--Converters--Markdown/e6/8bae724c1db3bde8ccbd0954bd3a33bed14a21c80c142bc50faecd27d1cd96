I"Om<p>时间过的很快，写<a href="http://www.ityouknow.com/springcloud/2017/06/01/gateway-service-zuul.html">springcloud(十)：服务网关zuul初级篇</a>还在半年前，现在已经是2018年了，我们继续探讨Zuul更高级的使用方式。</p>

<p>上篇文章主要介绍了Zuul网关使用模式，以及自动转发机制，但其实Zuul还有更多的应用场景，比如：鉴权、流量转发、请求统计等等，这些功能都可以使用Zuul来实现。</p>

<h2 id="zuul的核心">Zuul的核心</h2>

<p>Filter是Zuul的核心，用来实现对外服务的控制。Filter的生命周期有4个，分别是“PRE”、“ROUTING”、“POST”、“ERROR”，整个生命周期可以用下图来表示。</p>

<p><img src="http://favorites.ren/assets/images/2018/springcloud/zuul-core.png" alt="" /></p>

<p>Zuul大部分功能都是通过过滤器来实现的，这些过滤器类型对应于请求的典型生命周期。</p>

<ul>
  <li><strong>PRE：</strong> 这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择请求的微服务、记录调试信息等。</li>
  <li><strong>ROUTING：</strong>这种过滤器将请求路由到微服务。这种过滤器用于构建发送给微服务的请求，并使用Apache HttpClient或Netfilx Ribbon请求微服务。</li>
  <li><strong>POST：</strong>这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等。</li>
  <li><strong>ERROR：</strong>在其他阶段发生错误时执行该过滤器。
除了默认的过滤器类型，Zuul还允许我们创建自定义的过滤器类型。例如，我们可以定制一种STATIC类型的过滤器，直接在Zuul中生成响应，而不将请求转发到后端的微服务。</li>
</ul>

<h3 id="zuul中默认实现的filter">Zuul中默认实现的Filter</h3>

<table>
  <thead>
    <tr>
      <th>类型</th>
      <th>顺序</th>
      <th>过滤器</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>pre</td>
      <td>-3</td>
      <td>ServletDetectionFilter</td>
      <td>标记处理Servlet的类型</td>
    </tr>
    <tr>
      <td>pre</td>
      <td>-2</td>
      <td>Servlet30WrapperFilter</td>
      <td>包装HttpServletRequest请求</td>
    </tr>
    <tr>
      <td>pre</td>
      <td>-1</td>
      <td>FormBodyWrapperFilter</td>
      <td>包装请求体</td>
    </tr>
    <tr>
      <td>route</td>
      <td>1</td>
      <td>DebugFilter</td>
      <td>标记调试标志</td>
    </tr>
    <tr>
      <td>route</td>
      <td>5</td>
      <td>PreDecorationFilter</td>
      <td>处理请求上下文供后续使用</td>
    </tr>
    <tr>
      <td>route</td>
      <td>10</td>
      <td>RibbonRoutingFilter</td>
      <td>serviceId请求转发</td>
    </tr>
    <tr>
      <td>route</td>
      <td>100</td>
      <td>SimpleHostRoutingFilter</td>
      <td>url请求转发</td>
    </tr>
    <tr>
      <td>route</td>
      <td>500</td>
      <td>SendForwardFilter</td>
      <td>forward请求转发</td>
    </tr>
    <tr>
      <td>post</td>
      <td>0</td>
      <td>SendErrorFilter</td>
      <td>处理有错误的请求响应</td>
    </tr>
    <tr>
      <td>post</td>
      <td>1000</td>
      <td>SendResponseFilter</td>
      <td>处理正常的请求响应</td>
    </tr>
  </tbody>
</table>

<p><strong>禁用指定的Filter</strong></p>

<p>可以在application.yml中配置需要禁用的filter，格式：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zuul:
	FormBodyWrapperFilter:
		pre:
			disable: true
</code></pre></div></div>

<h2 id="自定义filter">自定义Filter</h2>

<p>实现自定义Filter，需要继承ZuulFilter的类，并覆盖其中的4个方法。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFilter</span> <span class="kd">extends</span> <span class="nc">ZuulFilter</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="nc">String</span> <span class="nf">filterType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"pre"</span><span class="o">;</span> <span class="c1">//定义filter的类型，有pre、route、post、error四种</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">int</span> <span class="nf">filterOrder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">10</span><span class="o">;</span> <span class="c1">//定义filter的顺序，数字越小表示顺序越高，越先执行</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kt">boolean</span> <span class="nf">shouldFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="c1">//表示是否需要执行该filter，true表示执行，false表示不执行</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nc">Object</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">//filter需要执行的具体操作</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="自定义filter示例">自定义Filter示例</h2>

<p>我们假设有这样一个场景，因为服务网关应对的是外部的所有请求，为了避免产生安全隐患，我们需要对请求做一定的限制，比如请求中含有Token便让请求继续往下走，如果请求不带Token就直接返回并给出提示。</p>

<p>首先自定义一个Filter，在run()方法中验证参数是否含有Token。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenFilter</span> <span class="kd">extends</span> <span class="nc">ZuulFilter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">TokenFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">filterType</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"pre"</span><span class="o">;</span> <span class="c1">// 可以在请求被路由之前调用</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">filterOrder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// filter执行顺序，通过数字指定 ,优先级为0，数字越大，优先级越低</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">shouldFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span><span class="c1">// 是否执行该过滤器，此处为true，说明需要过滤</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">RequestContext</span> <span class="n">ctx</span> <span class="o">=</span> <span class="nc">RequestContext</span><span class="o">.</span><span class="na">getCurrentContext</span><span class="o">();</span>
        <span class="nc">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">ctx</span><span class="o">.</span><span class="na">getRequest</span><span class="o">();</span>

        <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"---&gt;&gt;&gt; TokenFilter {},{}"</span><span class="o">,</span> <span class="n">request</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(),</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>

        <span class="nc">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">"token"</span><span class="o">);</span><span class="c1">// 获取请求的参数</span>

        <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">isNotBlank</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">setSendZuulResponse</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span> <span class="c1">//对请求进行路由</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">setResponseStatusCode</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"isSuccess"</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">setSendZuulResponse</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span> <span class="c1">//不对其进行路由</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">setResponseStatusCode</span><span class="o">(</span><span class="mi">400</span><span class="o">);</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">setResponseBody</span><span class="o">(</span><span class="s">"token is empty"</span><span class="o">);</span>
            <span class="n">ctx</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"isSuccess"</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>将TokenFilter加入到请求拦截队列，在启动类中添加以下代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Bean</span>
<span class="kd">public</span> <span class="nc">TokenFilter</span> <span class="nf">tokenFilter</span><span class="o">()</span> <span class="o">{</span>
	<span class="k">return</span> <span class="k">new</span> <span class="nf">TokenFilter</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这样就将我们自定义好的Filter加入到了请求拦截中。</p>

<p><strong>测试</strong></p>

<p>我们依次启动示例项目：<code class="highlighter-rouge">spring-cloud-eureka</code>、<code class="highlighter-rouge">spring-cloud-producer</code>、<code class="highlighter-rouge">spring-cloud-zuul</code>，这个三个项目均为上一篇示例项目，<code class="highlighter-rouge">spring-cloud-zuul</code>稍微进行改造。</p>

<p>访问地址：<code class="highlighter-rouge">http://localhost:8888/spring-cloud-producer/hello?name=neo</code>，返回：token is empty ，请求被拦截返回。<br />
访问地址：<code class="highlighter-rouge">http://localhost:8888/spring-cloud-producer/hello?name=neo&amp;token=xx</code>，返回：hello neo，this is first messge，说明请求正常响应。</p>

<p>通过上面这例子我们可以看出，我们可以使用“PRE”类型的Filter做很多的验证工作，在实际使用中我们可以结合shiro、oauth2.0等技术去做鉴权、验证。</p>

<h2 id="路由熔断">路由熔断</h2>

<p>当我们的后端服务出现异常的时候，我们不希望将异常抛出给最外层，期望服务可以自动进行一降级。Zuul给我们提供了这样的支持。当某个服务出现异常时，直接返回我们预设的信息。</p>

<p>我们通过自定义的fallback方法，并且将其指定给某个route来实现该route访问出问题的熔断处理。主要继承ZuulFallbackProvider接口来实现，ZuulFallbackProvider默认有两个方法，一个用来指明熔断拦截哪个服务，一个定制返回内容。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ZuulFallbackProvider</span> <span class="o">{</span>
   <span class="cm">/**
	 * The route this fallback will be used for.
	 * @return The route the fallback will be used for.
	 */</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getRoute</span><span class="o">();</span>

	<span class="cm">/**
	 * Provides a fallback response.
	 * @return The fallback response.
	 */</span>
	<span class="kd">public</span> <span class="nc">ClientHttpResponse</span> <span class="nf">fallbackResponse</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>实现类通过实现getRoute方法，告诉Zuul它是负责哪个route定义的熔断。而fallbackResponse方法则是告诉 Zuul 断路出现时，它会提供一个什么返回值来处理请求。</p>

<p>后来Spring又扩展了此类，丰富了返回方式，在返回的内容中添加了异常信息，因此最新版本建议直接继承类<code class="highlighter-rouge">FallbackProvider</code> 。</p>

<p>我们以上面的spring-cloud-producer服务为例，定制它的熔断返回内容。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProducerFallback</span> <span class="kd">implements</span> <span class="nc">FallbackProvider</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">FallbackProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="c1">//指定要处理的 service。</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getRoute</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"spring-cloud-producer"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">ClientHttpResponse</span> <span class="nf">fallbackResponse</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ClientHttpResponse</span><span class="o">()</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">HttpStatus</span> <span class="nf">getStatusCode</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getRawStatusCode</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="mi">200</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getStatusText</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="s">"OK"</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="o">{</span>

            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">InputStream</span> <span class="nf">getBody</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">ByteArrayInputStream</span><span class="o">(</span><span class="s">"The service is unavailable."</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
            <span class="o">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="nc">HttpHeaders</span> <span class="nf">getHeaders</span><span class="o">()</span> <span class="o">{</span>
                <span class="nc">HttpHeaders</span> <span class="n">headers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HttpHeaders</span><span class="o">();</span>
                <span class="n">headers</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">);</span>
                <span class="k">return</span> <span class="n">headers</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">ClientHttpResponse</span> <span class="nf">fallbackResponse</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">cause</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">cause</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cause</span><span class="o">.</span><span class="na">getCause</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">cause</span><span class="o">.</span><span class="na">getCause</span><span class="o">().</span><span class="na">getMessage</span><span class="o">();</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Excption {}"</span><span class="o">,</span><span class="n">reason</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nf">fallbackResponse</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>当服务出现异常时，打印相关异常信息，并返回”The service is unavailable.”。</p>

<p>启动项目spring-cloud-producer-2，这时候服务中心会有两个spring-cloud-producer项目，我们重启Zuul项目。再手动关闭spring-cloud-producer-2项目，多次访问地址：<code class="highlighter-rouge">http://localhost:8888/spring-cloud-producer/hello?name=neo&amp;token=xx</code>，会交替返回：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello neo，this is first messge
The service is unavailable.
...
</code></pre></div></div>

<p>根据返回结果可以看出：spring-cloud-producer-2项目已经启用了熔断，返回:<code class="highlighter-rouge">The service is unavailable.</code></p>

<blockquote>
  <p>Zuul 目前只支持服务级别的熔断，不支持具体到某个URL进行熔断。</p>
</blockquote>

<h2 id="路由重试">路由重试</h2>

<p>有时候因为网络或者其它原因，服务可能会暂时的不可用，这个时候我们希望可以再次对服务进行重试，Zuul也帮我们实现了此功能，需要结合Spring Retry 一起来实现。下面我们以上面的项目为例做演示。</p>

<p><strong>添加Spring Retry依赖</strong></p>

<p>首先在spring-cloud-zuul项目中添加Spring Retry依赖。</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
	<span class="nt">&lt;groupId&gt;</span>org.springframework.retry<span class="nt">&lt;/groupId&gt;</span>
	<span class="nt">&lt;artifactId&gt;</span>spring-retry<span class="nt">&lt;/artifactId&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>

<p><strong>开启Zuul Retry</strong></p>

<p>再配置文件中配置启用Zuul Retry</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#是否开启重试功能
</span><span class="py">zuul.retryable</span><span class="p">=</span><span class="s">true</span>
<span class="c">#对当前服务的重试次数
</span><span class="py">ribbon.MaxAutoRetries</span><span class="p">=</span><span class="s">2</span>
<span class="c">#切换相同Server的次数
</span><span class="py">ribbon.MaxAutoRetriesNextServer</span><span class="p">=</span><span class="s">0</span>
</code></pre></div></div>

<p>这样我们就开启了Zuul的重试功能。</p>

<p><strong>测试</strong></p>

<p>我们对spring-cloud-producer-2进行改造，在hello方法中添加定时，并且在请求的一开始打印参数。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">index</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"request two name is "</span><span class="o">+</span><span class="n">name</span><span class="o">);</span>
    <span class="k">try</span><span class="o">{</span>
        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000000</span><span class="o">);</span>
    <span class="o">}</span><span class="k">catch</span> <span class="o">(</span> <span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
        <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">" hello two error"</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="s">"hello "</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">"，this is two messge"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>重启 spring-cloud-producer-2和spring-cloud-zuul项目。</p>

<p>访问地址：<code class="highlighter-rouge">http://localhost:8888/spring-cloud-producer/hello?name=neo&amp;token=xx</code>，当页面返回：<code class="highlighter-rouge">The service is unavailable.</code>时查看项目spring-cloud-producer-2后台日志如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2018-01-22 19:50:32.401  INFO 19488 --- [io-9001-exec-14] o.s.c.n.z.f.route.FallbackProvider       : request two name is neo
2018-01-22 19:50:33.402  INFO 19488 --- [io-9001-exec-15] o.s.c.n.z.f.route.FallbackProvider       : request two name is neo
2018-01-22 19:50:34.404  INFO 19488 --- [io-9001-exec-16] o.s.c.n.z.f.route.FallbackProvider       : request two name is neo
</code></pre></div></div>

<p>说明进行了三次的请求，也就是进行了两次的重试。这样也就验证了我们的配置信息，完成了Zuul的重试功能。</p>

<p><strong>注意</strong></p>

<p>开启重试在某些情况下是有问题的，比如当压力过大，一个实例停止响应时，路由将流量转到另一个实例，很有可能导致最终所有的实例全被压垮。说到底，断路器的其中一个作用就是防止故障或者压力扩散。用了retry，断路器就只有在该服务的所有实例都无法运作的情况下才能起作用。这种时候，断路器的形式更像是提供一种友好的错误信息，或者假装服务正常运行的假象给使用者。</p>

<p>不用retry，仅使用负载均衡和熔断，就必须考虑到是否能够接受单个服务实例关闭和eureka刷新服务列表之间带来的短时间的熔断。如果可以接受，就无需使用retry。</p>

<h2 id="zuul高可用">Zuul高可用</h2>

<p><img src="http://favorites.ren/assets/images/2018/springcloud/zuul-case.png" alt="" /></p>

<p>我们实际使用Zuul的方式如上图，不同的客户端使用不同的负载将请求分发到后端的Zuul，Zuul在通过Eureka调用后端服务，最后对外输出。因此为了保证Zuul的高可用性，前端可以同时启动多个Zuul实例进行负载，在Zuul的前端使用Nginx或者F5进行负载转发以达到高可用性。</p>

<p><strong><a href="https://github.com/ityouknow/spring-cloud-examples">示例代码-github</a></strong></p>

<p><strong><a href="https://gitee.com/ityouknow/spring-cloud-examples">示例代码-码云</a></strong></p>

<p><strong>参考：</strong></p>

<p><a href="http://www.ymq.io/2017/12/11/spring-cloud-zuul-filter/">Spring Cloud（七）服务网关 Zuul Filter 使用</a>     <br />
<a href="http://tech.lede.com/2017/05/16/rd/server/SpringCloudZuul/">Spring Cloud技术分析（4）- spring cloud zuul</a>   <br />
<a href="https://xli1224.github.io/2017/09/09/use-zuul/">Zuul 路由使用</a></p>

:ET